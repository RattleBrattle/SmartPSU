
Smart Power Supply (SPS) V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  00002196  0000222a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080020c  0080020c  000023d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f63  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bde  00000000  00000000  00006657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028b3  00000000  00000000  00007235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  00009ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001016  00000000  00000000  0000a490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038aa  00000000  00000000  0000b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000ed50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_4>
      14:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_5>
      18:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__vector_6>
      1c:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_7>
      20:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_8>
      24:	0c 94 8b 03 	jmp	0x716	; 0x716 <__vector_9>
      28:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_10>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	07 05       	cpc	r16, r7
      56:	11 05       	cpc	r17, r1
      58:	1b 05       	cpc	r17, r11
      5a:	25 05       	cpc	r18, r5
      5c:	2f 05       	cpc	r18, r15
      5e:	39 05       	cpc	r19, r9
      60:	43 05       	cpc	r20, r3

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	12 e0       	ldi	r17, 0x02	; 2
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e9       	ldi	r30, 0x96	; 150
      76:	f1 e2       	ldi	r31, 0x21	; 33
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 30       	cpi	r26, 0x0C	; 12
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	22 e0       	ldi	r18, 0x02	; 2
      86:	ac e0       	ldi	r26, 0x0C	; 12
      88:	b2 e0       	ldi	r27, 0x02	; 2
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 34       	cpi	r26, 0x45	; 69
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 8d 08 	call	0x111a	; 0x111a <main>
      98:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <DIO_setPinDirection>:
      break;
   case DIO_PORTC:
      TOGG_BIT(PORTC_REG, copy_u8pin);
      break;
   case DIO_PORTD:
      TOGG_BIT(PORTD_REG, copy_u8pin);
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	19 f1       	breq	.+70     	; 0xea <DIO_setPinDirection+0x4a>
      a4:	30 f0       	brcs	.+12     	; 0xb2 <DIO_setPinDirection+0x12>
      a6:	82 30       	cpi	r24, 0x02	; 2
      a8:	e1 f1       	breq	.+120    	; 0x122 <DIO_setPinDirection+0x82>
      aa:	83 30       	cpi	r24, 0x03	; 3
      ac:	09 f4       	brne	.+2      	; 0xb0 <DIO_setPinDirection+0x10>
      ae:	55 c0       	rjmp	.+170    	; 0x15a <DIO_setPinDirection+0xba>
      b0:	08 95       	ret
      b2:	44 23       	and	r20, r20
      b4:	19 f0       	breq	.+6      	; 0xbc <DIO_setPinDirection+0x1c>
      b6:	41 30       	cpi	r20, 0x01	; 1
      b8:	69 f0       	breq	.+26     	; 0xd4 <DIO_setPinDirection+0x34>
      ba:	08 95       	ret
      bc:	2a b3       	in	r18, 0x1a	; 26
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_setPinDirection+0x28>
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	6a 95       	dec	r22
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_setPinDirection+0x24>
      cc:	80 95       	com	r24
      ce:	82 23       	and	r24, r18
      d0:	8a bb       	out	0x1a, r24	; 26
      d2:	08 95       	ret
      d4:	2a b3       	in	r18, 0x1a	; 26
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_setPinDirection+0x40>
      dc:	88 0f       	add	r24, r24
      de:	99 1f       	adc	r25, r25
      e0:	6a 95       	dec	r22
      e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_setPinDirection+0x3c>
      e4:	82 2b       	or	r24, r18
      e6:	8a bb       	out	0x1a, r24	; 26
      e8:	08 95       	ret
      ea:	44 23       	and	r20, r20
      ec:	19 f0       	breq	.+6      	; 0xf4 <DIO_setPinDirection+0x54>
      ee:	41 30       	cpi	r20, 0x01	; 1
      f0:	69 f0       	breq	.+26     	; 0x10c <DIO_setPinDirection+0x6c>
      f2:	08 95       	ret
      f4:	27 b3       	in	r18, 0x17	; 23
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_setPinDirection+0x60>
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_setPinDirection+0x5c>
     104:	80 95       	com	r24
     106:	82 23       	and	r24, r18
     108:	87 bb       	out	0x17, r24	; 23
     10a:	08 95       	ret
     10c:	27 b3       	in	r18, 0x17	; 23
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_setPinDirection+0x78>
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_setPinDirection+0x74>
     11c:	82 2b       	or	r24, r18
     11e:	87 bb       	out	0x17, r24	; 23
     120:	08 95       	ret
     122:	44 23       	and	r20, r20
     124:	19 f0       	breq	.+6      	; 0x12c <DIO_setPinDirection+0x8c>
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	69 f0       	breq	.+26     	; 0x144 <DIO_setPinDirection+0xa4>
     12a:	08 95       	ret
     12c:	24 b3       	in	r18, 0x14	; 20
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_setPinDirection+0x98>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	6a 95       	dec	r22
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_setPinDirection+0x94>
     13c:	80 95       	com	r24
     13e:	82 23       	and	r24, r18
     140:	84 bb       	out	0x14, r24	; 20
     142:	08 95       	ret
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_setPinDirection+0xb0>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_setPinDirection+0xac>
     154:	82 2b       	or	r24, r18
     156:	84 bb       	out	0x14, r24	; 20
     158:	08 95       	ret
     15a:	44 23       	and	r20, r20
     15c:	19 f0       	breq	.+6      	; 0x164 <DIO_setPinDirection+0xc4>
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	69 f0       	breq	.+26     	; 0x17c <DIO_setPinDirection+0xdc>
     162:	08 95       	ret
     164:	21 b3       	in	r18, 0x11	; 17
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_setPinDirection+0xd0>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_setPinDirection+0xcc>
     174:	80 95       	com	r24
     176:	82 23       	and	r24, r18
     178:	81 bb       	out	0x11, r24	; 17
     17a:	08 95       	ret
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_setPinDirection+0xe8>
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	6a 95       	dec	r22
     18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_setPinDirection+0xe4>
     18c:	82 2b       	or	r24, r18
     18e:	81 bb       	out	0x11, r24	; 17
     190:	08 95       	ret

00000192 <DIO_setPinVal>:
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	19 f1       	breq	.+70     	; 0x1dc <DIO_setPinVal+0x4a>
     196:	30 f0       	brcs	.+12     	; 0x1a4 <DIO_setPinVal+0x12>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	e1 f1       	breq	.+120    	; 0x214 <DIO_setPinVal+0x82>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_setPinVal+0x10>
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <DIO_setPinVal+0xba>
     1a2:	08 95       	ret
     1a4:	44 23       	and	r20, r20
     1a6:	19 f0       	breq	.+6      	; 0x1ae <DIO_setPinVal+0x1c>
     1a8:	41 30       	cpi	r20, 0x01	; 1
     1aa:	69 f0       	breq	.+26     	; 0x1c6 <DIO_setPinVal+0x34>
     1ac:	08 95       	ret
     1ae:	2b b3       	in	r18, 0x1b	; 27
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPinVal+0x28>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	6a 95       	dec	r22
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPinVal+0x24>
     1be:	80 95       	com	r24
     1c0:	82 23       	and	r24, r18
     1c2:	8b bb       	out	0x1b, r24	; 27
     1c4:	08 95       	ret
     1c6:	2b b3       	in	r18, 0x1b	; 27
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_setPinVal+0x40>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	6a 95       	dec	r22
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_setPinVal+0x3c>
     1d6:	82 2b       	or	r24, r18
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret
     1dc:	44 23       	and	r20, r20
     1de:	19 f0       	breq	.+6      	; 0x1e6 <DIO_setPinVal+0x54>
     1e0:	41 30       	cpi	r20, 0x01	; 1
     1e2:	69 f0       	breq	.+26     	; 0x1fe <DIO_setPinVal+0x6c>
     1e4:	08 95       	ret
     1e6:	28 b3       	in	r18, 0x18	; 24
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_setPinVal+0x60>
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	6a 95       	dec	r22
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_setPinVal+0x5c>
     1f6:	80 95       	com	r24
     1f8:	82 23       	and	r24, r18
     1fa:	88 bb       	out	0x18, r24	; 24
     1fc:	08 95       	ret
     1fe:	28 b3       	in	r18, 0x18	; 24
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_setPinVal+0x78>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	6a 95       	dec	r22
     20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_setPinVal+0x74>
     20e:	82 2b       	or	r24, r18
     210:	88 bb       	out	0x18, r24	; 24
     212:	08 95       	ret
     214:	44 23       	and	r20, r20
     216:	19 f0       	breq	.+6      	; 0x21e <DIO_setPinVal+0x8c>
     218:	41 30       	cpi	r20, 0x01	; 1
     21a:	69 f0       	breq	.+26     	; 0x236 <DIO_setPinVal+0xa4>
     21c:	08 95       	ret
     21e:	25 b3       	in	r18, 0x15	; 21
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_setPinVal+0x98>
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_setPinVal+0x94>
     22e:	80 95       	com	r24
     230:	82 23       	and	r24, r18
     232:	85 bb       	out	0x15, r24	; 21
     234:	08 95       	ret
     236:	25 b3       	in	r18, 0x15	; 21
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_setPinVal+0xb0>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	6a 95       	dec	r22
     244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_setPinVal+0xac>
     246:	82 2b       	or	r24, r18
     248:	85 bb       	out	0x15, r24	; 21
     24a:	08 95       	ret
     24c:	44 23       	and	r20, r20
     24e:	19 f0       	breq	.+6      	; 0x256 <DIO_setPinVal+0xc4>
     250:	41 30       	cpi	r20, 0x01	; 1
     252:	69 f0       	breq	.+26     	; 0x26e <DIO_setPinVal+0xdc>
     254:	08 95       	ret
     256:	22 b3       	in	r18, 0x12	; 18
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_setPinVal+0xd0>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	6a 95       	dec	r22
     264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_setPinVal+0xcc>
     266:	80 95       	com	r24
     268:	82 23       	and	r24, r18
     26a:	82 bb       	out	0x12, r24	; 18
     26c:	08 95       	ret
     26e:	22 b3       	in	r18, 0x12	; 18
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_setPinVal+0xe8>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_setPinVal+0xe4>
     27e:	82 2b       	or	r24, r18
     280:	82 bb       	out	0x12, r24	; 18
     282:	08 95       	ret

00000284 <DIO_readPinVal>:
}

u8 DIO_readPinVal(u8 copy_u8port, u8 copy_u8pin) {
   u8 local_u8State;

   switch (copy_u8port) {
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	81 f0       	breq	.+32     	; 0x2a8 <DIO_readPinVal+0x24>
     288:	28 f0       	brcs	.+10     	; 0x294 <DIO_readPinVal+0x10>
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	b9 f0       	breq	.+46     	; 0x2bc <DIO_readPinVal+0x38>
     28e:	83 30       	cpi	r24, 0x03	; 3
     290:	f9 f0       	breq	.+62     	; 0x2d0 <DIO_readPinVal+0x4c>
     292:	27 c0       	rjmp	.+78     	; 0x2e2 <DIO_readPinVal+0x5e>
   case DIO_PORTA:
      local_u8State = GET_BIT(PINA_REG, copy_u8pin);
     294:	89 b3       	in	r24, 0x19	; 25
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_readPinVal+0x1a>
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	6a 95       	dec	r22
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_readPinVal+0x16>
     2a2:	98 2f       	mov	r25, r24
     2a4:	91 70       	andi	r25, 0x01	; 1
      break;
     2a6:	1d c0       	rjmp	.+58     	; 0x2e2 <DIO_readPinVal+0x5e>
   case DIO_PORTB:
      local_u8State = GET_BIT(PINB_REG, copy_u8pin);
     2a8:	86 b3       	in	r24, 0x16	; 22
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_readPinVal+0x2e>
     2ae:	95 95       	asr	r25
     2b0:	87 95       	ror	r24
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_readPinVal+0x2a>
     2b6:	98 2f       	mov	r25, r24
     2b8:	91 70       	andi	r25, 0x01	; 1
      break;
     2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <DIO_readPinVal+0x5e>
   case DIO_PORTC:
      local_u8State = GET_BIT(PINC_REG, copy_u8pin);
     2bc:	83 b3       	in	r24, 0x13	; 19
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_readPinVal+0x42>
     2c2:	95 95       	asr	r25
     2c4:	87 95       	ror	r24
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_readPinVal+0x3e>
     2ca:	98 2f       	mov	r25, r24
     2cc:	91 70       	andi	r25, 0x01	; 1
      break;
     2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <DIO_readPinVal+0x5e>
   case DIO_PORTD:
      local_u8State = GET_BIT(PINC_REG, copy_u8pin);
     2d0:	83 b3       	in	r24, 0x13	; 19
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_readPinVal+0x56>
     2d6:	95 95       	asr	r25
     2d8:	87 95       	ror	r24
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_readPinVal+0x52>
     2de:	98 2f       	mov	r25, r24
     2e0:	91 70       	andi	r25, 0x01	; 1
   default: // Add an Error Prompt or interrupt here later******
      break;
   }

   return local_u8State;
}
     2e2:	89 2f       	mov	r24, r25
     2e4:	08 95       	ret

000002e6 <PRV_writeHalfPort>:
		case LCD_SHIFT_RIGHT:
		for (local_u8Loop = 0; local_u8Loop < copy_u8ShiftsAmount; local_u8Loop++)
		        LCD_sendCommand(0b00011100);
		break;
	}
}
     2e6:	cf 93       	push	r28
     2e8:	c8 2f       	mov	r28, r24
     2ea:	48 2f       	mov	r20, r24
     2ec:	41 70       	andi	r20, 0x01	; 1
     2ee:	64 e0       	ldi	r22, 0x04	; 4
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     2f6:	c1 fb       	bst	r28, 1
     2f8:	44 27       	eor	r20, r20
     2fa:	40 f9       	bld	r20, 0
     2fc:	65 e0       	ldi	r22, 0x05	; 5
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     304:	c2 fb       	bst	r28, 2
     306:	44 27       	eor	r20, r20
     308:	40 f9       	bld	r20, 0
     30a:	66 e0       	ldi	r22, 0x06	; 6
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     312:	c3 fb       	bst	r28, 3
     314:	44 27       	eor	r20, r20
     316:	40 f9       	bld	r20, 0
     318:	67 e0       	ldi	r22, 0x07	; 7
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <PRV_enableTriggerWrite>:
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     32e:	8f e9       	ldi	r24, 0x9F	; 159
     330:	9f e0       	ldi	r25, 0x0F	; 15
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <PRV_enableTriggerWrite+0xe>
     336:	00 c0       	rjmp	.+0      	; 0x338 <PRV_enableTriggerWrite+0x14>
     338:	00 00       	nop
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	62 e0       	ldi	r22, 0x02	; 2
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     344:	08 95       	ret

00000346 <ADC_init>:
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	21 f0       	breq	.+8      	; 0x352 <ADC_init+0xc>
     34a:	50 f0       	brcs	.+20     	; 0x360 <ADC_init+0x1a>
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	79 f0       	breq	.+30     	; 0x36e <ADC_init+0x28>
     350:	14 c0       	rjmp	.+40     	; 0x37a <ADC_init+0x34>
     352:	87 b1       	in	r24, 0x07	; 7
     354:	8f 77       	andi	r24, 0x7F	; 127
     356:	87 b9       	out	0x07, r24	; 7
     358:	87 b1       	in	r24, 0x07	; 7
     35a:	8f 7b       	andi	r24, 0xBF	; 191
     35c:	87 b9       	out	0x07, r24	; 7
     35e:	0d c0       	rjmp	.+26     	; 0x37a <ADC_init+0x34>
     360:	87 b1       	in	r24, 0x07	; 7
     362:	8f 77       	andi	r24, 0x7F	; 127
     364:	87 b9       	out	0x07, r24	; 7
     366:	87 b1       	in	r24, 0x07	; 7
     368:	80 64       	ori	r24, 0x40	; 64
     36a:	87 b9       	out	0x07, r24	; 7
     36c:	06 c0       	rjmp	.+12     	; 0x37a <ADC_init+0x34>
     36e:	87 b1       	in	r24, 0x07	; 7
     370:	80 68       	ori	r24, 0x80	; 128
     372:	87 b9       	out	0x07, r24	; 7
     374:	87 b1       	in	r24, 0x07	; 7
     376:	80 64       	ori	r24, 0x40	; 64
     378:	87 b9       	out	0x07, r24	; 7
     37a:	86 b1       	in	r24, 0x06	; 6
     37c:	81 60       	ori	r24, 0x01	; 1
     37e:	86 b9       	out	0x06, r24	; 6
     380:	86 b1       	in	r24, 0x06	; 6
     382:	82 60       	ori	r24, 0x02	; 2
     384:	86 b9       	out	0x06, r24	; 6
     386:	86 b1       	in	r24, 0x06	; 6
     388:	84 60       	ori	r24, 0x04	; 4
     38a:	86 b9       	out	0x06, r24	; 6
     38c:	86 b1       	in	r24, 0x06	; 6
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	86 b9       	out	0x06, r24	; 6
     392:	86 b1       	in	r24, 0x06	; 6
     394:	8f 7d       	andi	r24, 0xDF	; 223
     396:	86 b9       	out	0x06, r24	; 6
     398:	86 b1       	in	r24, 0x06	; 6
     39a:	80 68       	ori	r24, 0x80	; 128
     39c:	86 b9       	out	0x06, r24	; 6
     39e:	08 95       	ret

000003a0 <ADC_getValue>:
     3a0:	88 30       	cpi	r24, 0x08	; 8
     3a2:	70 f4       	brcc	.+28     	; 0x3c0 <ADC_getValue+0x20>
     3a4:	97 b1       	in	r25, 0x07	; 7
     3a6:	90 7e       	andi	r25, 0xE0	; 224
     3a8:	97 b9       	out	0x07, r25	; 7
     3aa:	97 b1       	in	r25, 0x07	; 7
     3ac:	89 2b       	or	r24, r25
     3ae:	87 b9       	out	0x07, r24	; 7
     3b0:	86 b1       	in	r24, 0x06	; 6
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	86 b9       	out	0x06, r24	; 6
     3b6:	36 99       	sbic	0x06, 6	; 6
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <ADC_getValue+0x16>
     3ba:	84 b1       	in	r24, 0x04	; 4
     3bc:	95 b1       	in	r25, 0x05	; 5
     3be:	08 95       	ret
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	08 95       	ret

000003c6 <GIE_enable>:
     3c6:	8f b7       	in	r24, 0x3f	; 63
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	8f bf       	out	0x3f, r24	; 63
     3cc:	08 95       	ret

000003ce <GIE_disable>:
     3ce:	8f b7       	in	r24, 0x3f	; 63
     3d0:	8f 77       	andi	r24, 0x7F	; 127
     3d2:	8f bf       	out	0x3f, r24	; 63
     3d4:	08 95       	ret

000003d6 <TMR0_init>:
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <TMR0_init+0x10>
     3da:	a8 f0       	brcs	.+42     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	f9 f0       	breq	.+62     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     3e0:	83 30       	cpi	r24, 0x03	; 3
     3e2:	a9 f1       	breq	.+106    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     3e4:	08 95       	ret
     3e6:	83 b7       	in	r24, 0x33	; 51
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	83 bf       	out	0x33, r24	; 51
     3ec:	83 b7       	in	r24, 0x33	; 51
     3ee:	87 7f       	andi	r24, 0xF7	; 247
     3f0:	83 bf       	out	0x33, r24	; 51
     3f2:	61 30       	cpi	r22, 0x01	; 1
     3f4:	19 f4       	brne	.+6      	; 0x3fc <TMR0_init+0x26>
     3f6:	81 e7       	ldi	r24, 0x71	; 113
     3f8:	82 bf       	out	0x32, r24	; 50
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <TMR0_init+0x28>
     3fc:	12 be       	out	0x32, r1	; 50
     3fe:	89 b7       	in	r24, 0x39	; 57
     400:	81 60       	ori	r24, 0x01	; 1
     402:	89 bf       	out	0x39, r24	; 57
     404:	08 95       	ret
     406:	83 b7       	in	r24, 0x33	; 51
     408:	8f 7b       	andi	r24, 0xBF	; 191
     40a:	83 bf       	out	0x33, r24	; 51
     40c:	83 b7       	in	r24, 0x33	; 51
     40e:	88 60       	ori	r24, 0x08	; 8
     410:	83 bf       	out	0x33, r24	; 51
     412:	89 ef       	ldi	r24, 0xF9	; 249
     414:	8c bf       	out	0x3c, r24	; 60
     416:	89 b7       	in	r24, 0x39	; 57
     418:	82 60       	ori	r24, 0x02	; 2
     41a:	89 bf       	out	0x39, r24	; 57
     41c:	08 95       	ret
     41e:	83 b7       	in	r24, 0x33	; 51
     420:	80 64       	ori	r24, 0x40	; 64
     422:	83 bf       	out	0x33, r24	; 51
     424:	83 b7       	in	r24, 0x33	; 51
     426:	88 60       	ori	r24, 0x08	; 8
     428:	83 bf       	out	0x33, r24	; 51
     42a:	44 23       	and	r20, r20
     42c:	19 f0       	breq	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     42e:	41 30       	cpi	r20, 0x01	; 1
     430:	41 f0       	breq	.+16     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     432:	0d c0       	rjmp	.+26     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     434:	83 b7       	in	r24, 0x33	; 51
     436:	80 61       	ori	r24, 0x10	; 16
     438:	83 bf       	out	0x33, r24	; 51
     43a:	83 b7       	in	r24, 0x33	; 51
     43c:	80 62       	ori	r24, 0x20	; 32
     43e:	83 bf       	out	0x33, r24	; 51
     440:	06 c0       	rjmp	.+12     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     442:	83 b7       	in	r24, 0x33	; 51
     444:	8f 7e       	andi	r24, 0xEF	; 239
     446:	83 bf       	out	0x33, r24	; 51
     448:	83 b7       	in	r24, 0x33	; 51
     44a:	80 62       	ori	r24, 0x20	; 32
     44c:	83 bf       	out	0x33, r24	; 51
     44e:	83 b7       	in	r24, 0x33	; 51
     450:	80 64       	ori	r24, 0x40	; 64
     452:	83 bf       	out	0x33, r24	; 51
     454:	83 b7       	in	r24, 0x33	; 51
     456:	87 7f       	andi	r24, 0xF7	; 247
     458:	83 bf       	out	0x33, r24	; 51
     45a:	44 23       	and	r20, r20
     45c:	19 f0       	breq	.+6      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     45e:	41 30       	cpi	r20, 0x01	; 1
     460:	41 f0       	breq	.+16     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     462:	08 95       	ret
     464:	83 b7       	in	r24, 0x33	; 51
     466:	80 61       	ori	r24, 0x10	; 16
     468:	83 bf       	out	0x33, r24	; 51
     46a:	83 b7       	in	r24, 0x33	; 51
     46c:	80 62       	ori	r24, 0x20	; 32
     46e:	83 bf       	out	0x33, r24	; 51
     470:	08 95       	ret
     472:	83 b7       	in	r24, 0x33	; 51
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	83 bf       	out	0x33, r24	; 51
     478:	83 b7       	in	r24, 0x33	; 51
     47a:	80 62       	ori	r24, 0x20	; 32
     47c:	83 bf       	out	0x33, r24	; 51
     47e:	08 95       	ret

00000480 <TMR0_start>:
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	f9 f0       	breq	.+62     	; 0x4c2 <TMR0_start+0x42>
     484:	28 f4       	brcc	.+10     	; 0x490 <TMR0_start+0x10>
     486:	88 23       	and	r24, r24
     488:	41 f0       	breq	.+16     	; 0x49a <TMR0_start+0x1a>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	81 f0       	breq	.+32     	; 0x4ae <TMR0_start+0x2e>
     48e:	08 95       	ret
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	09 f1       	breq	.+66     	; 0x4d6 <TMR0_start+0x56>
     494:	84 30       	cpi	r24, 0x04	; 4
     496:	49 f1       	breq	.+82     	; 0x4ea <TMR0_start+0x6a>
     498:	08 95       	ret
     49a:	83 b7       	in	r24, 0x33	; 51
     49c:	81 60       	ori	r24, 0x01	; 1
     49e:	83 bf       	out	0x33, r24	; 51
     4a0:	83 b7       	in	r24, 0x33	; 51
     4a2:	8d 7f       	andi	r24, 0xFD	; 253
     4a4:	83 bf       	out	0x33, r24	; 51
     4a6:	83 b7       	in	r24, 0x33	; 51
     4a8:	8b 7f       	andi	r24, 0xFB	; 251
     4aa:	83 bf       	out	0x33, r24	; 51
     4ac:	08 95       	ret
     4ae:	83 b7       	in	r24, 0x33	; 51
     4b0:	8e 7f       	andi	r24, 0xFE	; 254
     4b2:	83 bf       	out	0x33, r24	; 51
     4b4:	83 b7       	in	r24, 0x33	; 51
     4b6:	82 60       	ori	r24, 0x02	; 2
     4b8:	83 bf       	out	0x33, r24	; 51
     4ba:	83 b7       	in	r24, 0x33	; 51
     4bc:	8b 7f       	andi	r24, 0xFB	; 251
     4be:	83 bf       	out	0x33, r24	; 51
     4c0:	08 95       	ret
     4c2:	83 b7       	in	r24, 0x33	; 51
     4c4:	81 60       	ori	r24, 0x01	; 1
     4c6:	83 bf       	out	0x33, r24	; 51
     4c8:	83 b7       	in	r24, 0x33	; 51
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	83 bf       	out	0x33, r24	; 51
     4ce:	83 b7       	in	r24, 0x33	; 51
     4d0:	8b 7f       	andi	r24, 0xFB	; 251
     4d2:	83 bf       	out	0x33, r24	; 51
     4d4:	08 95       	ret
     4d6:	83 b7       	in	r24, 0x33	; 51
     4d8:	8e 7f       	andi	r24, 0xFE	; 254
     4da:	83 bf       	out	0x33, r24	; 51
     4dc:	83 b7       	in	r24, 0x33	; 51
     4de:	8d 7f       	andi	r24, 0xFD	; 253
     4e0:	83 bf       	out	0x33, r24	; 51
     4e2:	83 b7       	in	r24, 0x33	; 51
     4e4:	84 60       	ori	r24, 0x04	; 4
     4e6:	83 bf       	out	0x33, r24	; 51
     4e8:	08 95       	ret
     4ea:	83 b7       	in	r24, 0x33	; 51
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	83 bf       	out	0x33, r24	; 51
     4f0:	83 b7       	in	r24, 0x33	; 51
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
     4f4:	83 bf       	out	0x33, r24	; 51
     4f6:	83 b7       	in	r24, 0x33	; 51
     4f8:	84 60       	ori	r24, 0x04	; 4
     4fa:	83 bf       	out	0x33, r24	; 51
     4fc:	08 95       	ret

000004fe <TMR0_generatePWM>:
     4fe:	85 36       	cpi	r24, 0x65	; 101
     500:	08 f0       	brcs	.+2      	; 0x504 <TMR0_generatePWM+0x6>
     502:	84 e6       	ldi	r24, 0x64	; 100
     504:	66 23       	and	r22, r22
     506:	71 f0       	breq	.+28     	; 0x524 <TMR0_generatePWM+0x26>
     508:	61 30       	cpi	r22, 0x01	; 1
     50a:	e9 f4       	brne	.+58     	; 0x546 <TMR0_generatePWM+0x48>
     50c:	98 2f       	mov	r25, r24
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	64 e6       	ldi	r22, 0x64	; 100
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
     518:	61 50       	subi	r22, 0x01	; 1
     51a:	6c bf       	out	0x3c, r22	; 60
     51c:	84 2f       	mov	r24, r20
     51e:	0e 94 40 02 	call	0x480	; 0x480 <TMR0_start>
     522:	08 95       	ret
     524:	64 e6       	ldi	r22, 0x64	; 100
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	9b 01       	movw	r18, r22
     52a:	28 1b       	sub	r18, r24
     52c:	31 09       	sbc	r19, r1
     52e:	5f ef       	ldi	r21, 0xFF	; 255
     530:	52 9f       	mul	r21, r18
     532:	c0 01       	movw	r24, r0
     534:	53 9f       	mul	r21, r19
     536:	90 0d       	add	r25, r0
     538:	11 24       	eor	r1, r1
     53a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
     53e:	6c bf       	out	0x3c, r22	; 60
     540:	84 2f       	mov	r24, r20
     542:	0e 94 40 02 	call	0x480	; 0x480 <TMR0_start>
     546:	08 95       	ret

00000548 <TMR0_stop>:
     548:	83 b7       	in	r24, 0x33	; 51
     54a:	8e 7f       	andi	r24, 0xFE	; 254
     54c:	83 bf       	out	0x33, r24	; 51
     54e:	83 b7       	in	r24, 0x33	; 51
     550:	8d 7f       	andi	r24, 0xFD	; 253
     552:	83 bf       	out	0x33, r24	; 51
     554:	83 b7       	in	r24, 0x33	; 51
     556:	8b 7f       	andi	r24, 0xFB	; 251
     558:	83 bf       	out	0x33, r24	; 51
     55a:	08 95       	ret

0000055c <__vector_11>:
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	4f 93       	push	r20
     56c:	5f 93       	push	r21
     56e:	6f 93       	push	r22
     570:	7f 93       	push	r23
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	af 93       	push	r26
     578:	bf 93       	push	r27
     57a:	ef 93       	push	r30
     57c:	ff 93       	push	r31
     57e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <overflowCounter.1901>
     582:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <overflowCounter.1901+0x1>
     586:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <overflowCounter.1901+0x2>
     58a:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <overflowCounter.1901+0x3>
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	a1 1d       	adc	r26, r1
     592:	b1 1d       	adc	r27, r1
     594:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <overflowCounter.1901>
     598:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <overflowCounter.1901+0x1>
     59c:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <overflowCounter.1901+0x2>
     5a0:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <overflowCounter.1901+0x3>
     5a4:	40 91 3f 02 	lds	r20, 0x023F	; 0x80023f <PRV_u16CounterVal>
     5a8:	50 91 40 02 	lds	r21, 0x0240	; 0x800240 <PRV_u16CounterVal+0x1>
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	84 17       	cp	r24, r20
     5b2:	95 07       	cpc	r25, r21
     5b4:	a6 07       	cpc	r26, r22
     5b6:	b7 07       	cpc	r27, r23
     5b8:	78 f0       	brcs	.+30     	; 0x5d8 <__vector_11+0x7c>
     5ba:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <overflowCounter.1901>
     5be:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <overflowCounter.1901+0x1>
     5c2:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <overflowCounter.1901+0x2>
     5c6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <overflowCounter.1901+0x3>
     5ca:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <PRV_ptrFuncCallBack_OVF>
     5ce:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <PRV_ptrFuncCallBack_OVF+0x1>
     5d2:	30 97       	sbiw	r30, 0x00	; 0
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <__vector_11+0x7c>
     5d6:	09 95       	icall
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_10>:
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	2f 93       	push	r18
     606:	3f 93       	push	r19
     608:	4f 93       	push	r20
     60a:	5f 93       	push	r21
     60c:	6f 93       	push	r22
     60e:	7f 93       	push	r23
     610:	8f 93       	push	r24
     612:	9f 93       	push	r25
     614:	af 93       	push	r26
     616:	bf 93       	push	r27
     618:	ef 93       	push	r30
     61a:	ff 93       	push	r31
     61c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <local_u16Counter.1907>
     620:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <local_u16Counter.1907+0x1>
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <local_u16Counter.1907+0x1>
     62a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <local_u16Counter.1907>
     62e:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <PRV_u16CounterVal>
     632:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <PRV_u16CounterVal+0x1>
     636:	82 17       	cp	r24, r18
     638:	93 07       	cpc	r25, r19
     63a:	58 f0       	brcs	.+22     	; 0x652 <__vector_10+0x58>
     63c:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <local_u16Counter.1907+0x1>
     640:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <local_u16Counter.1907>
     644:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <PRV_ptrFuncCallBack_CTC>
     648:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <PRV_ptrFuncCallBack_CTC+0x1>
     64c:	30 97       	sbiw	r30, 0x00	; 0
     64e:	09 f0       	breq	.+2      	; 0x652 <__vector_10+0x58>
     650:	09 95       	icall
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <TMR1_start>:
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	f9 f0       	breq	.+62     	; 0x6b6 <TMR1_start+0x42>
     678:	28 f4       	brcc	.+10     	; 0x684 <TMR1_start+0x10>
     67a:	88 23       	and	r24, r24
     67c:	41 f0       	breq	.+16     	; 0x68e <TMR1_start+0x1a>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	81 f0       	breq	.+32     	; 0x6a2 <TMR1_start+0x2e>
     682:	08 95       	ret
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	09 f1       	breq	.+66     	; 0x6ca <TMR1_start+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	49 f1       	breq	.+82     	; 0x6de <TMR1_start+0x6a>
     68c:	08 95       	ret
     68e:	8e b5       	in	r24, 0x2e	; 46
     690:	81 60       	ori	r24, 0x01	; 1
     692:	8e bd       	out	0x2e, r24	; 46
     694:	8e b5       	in	r24, 0x2e	; 46
     696:	8d 7f       	andi	r24, 0xFD	; 253
     698:	8e bd       	out	0x2e, r24	; 46
     69a:	8e b5       	in	r24, 0x2e	; 46
     69c:	8b 7f       	andi	r24, 0xFB	; 251
     69e:	8e bd       	out	0x2e, r24	; 46
     6a0:	08 95       	ret
     6a2:	8e b5       	in	r24, 0x2e	; 46
     6a4:	8e 7f       	andi	r24, 0xFE	; 254
     6a6:	8e bd       	out	0x2e, r24	; 46
     6a8:	8e b5       	in	r24, 0x2e	; 46
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	8e bd       	out	0x2e, r24	; 46
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	8b 7f       	andi	r24, 0xFB	; 251
     6b2:	8e bd       	out	0x2e, r24	; 46
     6b4:	08 95       	ret
     6b6:	8e b5       	in	r24, 0x2e	; 46
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	8e b5       	in	r24, 0x2e	; 46
     6be:	82 60       	ori	r24, 0x02	; 2
     6c0:	8e bd       	out	0x2e, r24	; 46
     6c2:	8e b5       	in	r24, 0x2e	; 46
     6c4:	8b 7f       	andi	r24, 0xFB	; 251
     6c6:	8e bd       	out	0x2e, r24	; 46
     6c8:	08 95       	ret
     6ca:	8e b5       	in	r24, 0x2e	; 46
     6cc:	8e 7f       	andi	r24, 0xFE	; 254
     6ce:	8e bd       	out	0x2e, r24	; 46
     6d0:	8e b5       	in	r24, 0x2e	; 46
     6d2:	8d 7f       	andi	r24, 0xFD	; 253
     6d4:	8e bd       	out	0x2e, r24	; 46
     6d6:	8e b5       	in	r24, 0x2e	; 46
     6d8:	84 60       	ori	r24, 0x04	; 4
     6da:	8e bd       	out	0x2e, r24	; 46
     6dc:	08 95       	ret
     6de:	8e b5       	in	r24, 0x2e	; 46
     6e0:	81 60       	ori	r24, 0x01	; 1
     6e2:	8e bd       	out	0x2e, r24	; 46
     6e4:	8e b5       	in	r24, 0x2e	; 46
     6e6:	8d 7f       	andi	r24, 0xFD	; 253
     6e8:	8e bd       	out	0x2e, r24	; 46
     6ea:	8e b5       	in	r24, 0x2e	; 46
     6ec:	84 60       	ori	r24, 0x04	; 4
     6ee:	8e bd       	out	0x2e, r24	; 46
     6f0:	08 95       	ret

000006f2 <TMR1_stop>:
     6f2:	8e b5       	in	r24, 0x2e	; 46
     6f4:	8e 7f       	andi	r24, 0xFE	; 254
     6f6:	8e bd       	out	0x2e, r24	; 46
     6f8:	8e b5       	in	r24, 0x2e	; 46
     6fa:	8d 7f       	andi	r24, 0xFD	; 253
     6fc:	8e bd       	out	0x2e, r24	; 46
     6fe:	8e b5       	in	r24, 0x2e	; 46
     700:	8b 7f       	andi	r24, 0xFB	; 251
     702:	8e bd       	out	0x2e, r24	; 46
     704:	08 95       	ret

00000706 <TMR1_initModeICP>:
     706:	1f bc       	out	0x2f, r1	; 47
     708:	90 e4       	ldi	r25, 0x40	; 64
     70a:	9e bd       	out	0x2e, r25	; 46
     70c:	0e 94 3a 03 	call	0x674	; 0x674 <TMR1_start>
     710:	80 e2       	ldi	r24, 0x20	; 32
     712:	89 bf       	out	0x39, r24	; 57
     714:	08 95       	ret

00000716 <__vector_9>:
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	2f 93       	push	r18
     722:	3f 93       	push	r19
     724:	4f 93       	push	r20
     726:	5f 93       	push	r21
     728:	6f 93       	push	r22
     72a:	7f 93       	push	r23
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
     730:	af 93       	push	r26
     732:	bf 93       	push	r27
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
     738:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <overflowCounter.2060>
     73c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <overflowCounter.2060+0x1>
     740:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <overflowCounter.2060+0x2>
     744:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <overflowCounter.2060+0x3>
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	a1 1d       	adc	r26, r1
     74c:	b1 1d       	adc	r27, r1
     74e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <overflowCounter.2060>
     752:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <overflowCounter.2060+0x1>
     756:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <overflowCounter.2060+0x2>
     75a:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <overflowCounter.2060+0x3>
     75e:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <PRV_u32CounterVal_OVF_TMR1>
     762:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <PRV_u32CounterVal_OVF_TMR1+0x1>
     766:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <PRV_u32CounterVal_OVF_TMR1+0x2>
     76a:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <PRV_u32CounterVal_OVF_TMR1+0x3>
     76e:	84 17       	cp	r24, r20
     770:	95 07       	cpc	r25, r21
     772:	a6 07       	cpc	r26, r22
     774:	b7 07       	cpc	r27, r23
     776:	78 f0       	brcs	.+30     	; 0x796 <__vector_9+0x80>
     778:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <overflowCounter.2060>
     77c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <overflowCounter.2060+0x1>
     780:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <overflowCounter.2060+0x2>
     784:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <overflowCounter.2060+0x3>
     788:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <PRV_ptrFuncCallBack_OVF_TMR1>
     78c:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <PRV_ptrFuncCallBack_OVF_TMR1+0x1>
     790:	30 97       	sbiw	r30, 0x00	; 0
     792:	09 f0       	breq	.+2      	; 0x796 <__vector_9+0x80>
     794:	09 95       	icall
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	bf 91       	pop	r27
     79c:	af 91       	pop	r26
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	7f 91       	pop	r23
     7a4:	6f 91       	pop	r22
     7a6:	5f 91       	pop	r21
     7a8:	4f 91       	pop	r20
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <__vector_7>:
     7b8:	1f 92       	push	r1
     7ba:	0f 92       	push	r0
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	0f 92       	push	r0
     7c0:	11 24       	eor	r1, r1
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
     7da:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <local_u16Counter.2066>
     7de:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <local_u16Counter.2066+0x1>
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <local_u16Counter.2066+0x1>
     7e8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <local_u16Counter.2066>
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	40 91 31 02 	lds	r20, 0x0231	; 0x800231 <PRV_u32CounterValA_TMR1>
     7f4:	50 91 32 02 	lds	r21, 0x0232	; 0x800232 <PRV_u32CounterValA_TMR1+0x1>
     7f8:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <PRV_u32CounterValA_TMR1+0x2>
     7fc:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <PRV_u32CounterValA_TMR1+0x3>
     800:	84 17       	cp	r24, r20
     802:	95 07       	cpc	r25, r21
     804:	a6 07       	cpc	r26, r22
     806:	b7 07       	cpc	r27, r23
     808:	58 f0       	brcs	.+22     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     80a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <local_u16Counter.2066+0x1>
     80e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <local_u16Counter.2066>
     812:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <PRV_ptrFuncCallBack_CTCA_TMR1>
     816:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <PRV_ptrFuncCallBack_CTCA_TMR1+0x1>
     81a:	30 97       	sbiw	r30, 0x00	; 0
     81c:	09 f0       	breq	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81e:	09 95       	icall
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	bf 91       	pop	r27
     826:	af 91       	pop	r26
     828:	9f 91       	pop	r25
     82a:	8f 91       	pop	r24
     82c:	7f 91       	pop	r23
     82e:	6f 91       	pop	r22
     830:	5f 91       	pop	r21
     832:	4f 91       	pop	r20
     834:	3f 91       	pop	r19
     836:	2f 91       	pop	r18
     838:	0f 90       	pop	r0
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	0f 90       	pop	r0
     83e:	1f 90       	pop	r1
     840:	18 95       	reti

00000842 <__vector_8>:
     842:	1f 92       	push	r1
     844:	0f 92       	push	r0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	0f 92       	push	r0
     84a:	11 24       	eor	r1, r1
     84c:	2f 93       	push	r18
     84e:	3f 93       	push	r19
     850:	4f 93       	push	r20
     852:	5f 93       	push	r21
     854:	6f 93       	push	r22
     856:	7f 93       	push	r23
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
     860:	ef 93       	push	r30
     862:	ff 93       	push	r31
     864:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <local_u16Counter.2072>
     868:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <local_u16Counter.2072+0x1>
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <local_u16Counter.2072+0x1>
     872:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <local_u16Counter.2072>
     876:	a0 e0       	ldi	r26, 0x00	; 0
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <PRV_u32CounterValB_TMR1>
     87e:	50 91 2e 02 	lds	r21, 0x022E	; 0x80022e <PRV_u32CounterValB_TMR1+0x1>
     882:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <PRV_u32CounterValB_TMR1+0x2>
     886:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <PRV_u32CounterValB_TMR1+0x3>
     88a:	84 17       	cp	r24, r20
     88c:	95 07       	cpc	r25, r21
     88e:	a6 07       	cpc	r26, r22
     890:	b7 07       	cpc	r27, r23
     892:	58 f0       	brcs	.+22     	; 0x8aa <__stack+0x4b>
     894:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <local_u16Counter.2072+0x1>
     898:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <local_u16Counter.2072>
     89c:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <PRV_ptrFuncCallBack_CTCB_TMR1>
     8a0:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <PRV_ptrFuncCallBack_CTCB_TMR1+0x1>
     8a4:	30 97       	sbiw	r30, 0x00	; 0
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	09 95       	icall
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <__vector_6>:
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	2f 93       	push	r18
     8d8:	3f 93       	push	r19
     8da:	4f 93       	push	r20
     8dc:	5f 93       	push	r21
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	86 b5       	in	r24, 0x26	; 38
     8e4:	97 b5       	in	r25, 0x27	; 39
     8e6:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <edge>
     8ea:	21 11       	cpse	r18, r1
     8ec:	12 c0       	rjmp	.+36     	; 0x912 <__vector_6+0x46>
     8ee:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <last_capture.2078>
     8f2:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <last_capture.2078+0x1>
     8f6:	ac 01       	movw	r20, r24
     8f8:	42 1b       	sub	r20, r18
     8fa:	53 0b       	sbc	r21, r19
     8fc:	50 93 2a 02 	sts	0x022A, r21	; 0x80022a <high_time+0x1>
     900:	40 93 29 02 	sts	0x0229, r20	; 0x800229 <high_time>
     904:	2e b5       	in	r18, 0x2e	; 46
     906:	2f 7b       	andi	r18, 0xBF	; 191
     908:	2e bd       	out	0x2e, r18	; 46
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <edge>
     910:	10 c0       	rjmp	.+32     	; 0x932 <__vector_6+0x66>
     912:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <last_capture.2078>
     916:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <last_capture.2078+0x1>
     91a:	ac 01       	movw	r20, r24
     91c:	42 1b       	sub	r20, r18
     91e:	53 0b       	sbc	r21, r19
     920:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <period+0x1>
     924:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <period>
     928:	2e b5       	in	r18, 0x2e	; 46
     92a:	20 64       	ori	r18, 0x40	; 64
     92c:	2e bd       	out	0x2e, r18	; 46
     92e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <edge>
     932:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <last_capture.2078+0x1>
     936:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <last_capture.2078>
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <TMR2_init>:
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	31 f0       	breq	.+12     	; 0x960 <TMR2_init+0x10>
     954:	a8 f0       	brcs	.+42     	; 0x980 <TMR2_init+0x30>
     956:	82 30       	cpi	r24, 0x02	; 2
     958:	f9 f0       	breq	.+62     	; 0x998 <TMR2_init+0x48>
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	a9 f1       	breq	.+106    	; 0x9c8 <TMR2_init+0x78>
     95e:	08 95       	ret
     960:	85 b5       	in	r24, 0x25	; 37
     962:	8f 7b       	andi	r24, 0xBF	; 191
     964:	85 bd       	out	0x25, r24	; 37
     966:	85 b5       	in	r24, 0x25	; 37
     968:	87 7f       	andi	r24, 0xF7	; 247
     96a:	85 bd       	out	0x25, r24	; 37
     96c:	61 30       	cpi	r22, 0x01	; 1
     96e:	19 f4       	brne	.+6      	; 0x976 <TMR2_init+0x26>
     970:	81 e7       	ldi	r24, 0x71	; 113
     972:	84 bd       	out	0x24, r24	; 36
     974:	01 c0       	rjmp	.+2      	; 0x978 <TMR2_init+0x28>
     976:	14 bc       	out	0x24, r1	; 36
     978:	89 b7       	in	r24, 0x39	; 57
     97a:	80 64       	ori	r24, 0x40	; 64
     97c:	89 bf       	out	0x39, r24	; 57
     97e:	08 95       	ret
     980:	85 b5       	in	r24, 0x25	; 37
     982:	8f 7b       	andi	r24, 0xBF	; 191
     984:	85 bd       	out	0x25, r24	; 37
     986:	85 b5       	in	r24, 0x25	; 37
     988:	88 60       	ori	r24, 0x08	; 8
     98a:	85 bd       	out	0x25, r24	; 37
     98c:	89 ef       	ldi	r24, 0xF9	; 249
     98e:	83 bd       	out	0x23, r24	; 35
     990:	89 b7       	in	r24, 0x39	; 57
     992:	80 68       	ori	r24, 0x80	; 128
     994:	89 bf       	out	0x39, r24	; 57
     996:	08 95       	ret
     998:	85 b5       	in	r24, 0x25	; 37
     99a:	80 64       	ori	r24, 0x40	; 64
     99c:	85 bd       	out	0x25, r24	; 37
     99e:	85 b5       	in	r24, 0x25	; 37
     9a0:	88 60       	ori	r24, 0x08	; 8
     9a2:	85 bd       	out	0x25, r24	; 37
     9a4:	44 23       	and	r20, r20
     9a6:	19 f0       	breq	.+6      	; 0x9ae <TMR2_init+0x5e>
     9a8:	41 30       	cpi	r20, 0x01	; 1
     9aa:	41 f0       	breq	.+16     	; 0x9bc <TMR2_init+0x6c>
     9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <TMR2_init+0x78>
     9ae:	85 b5       	in	r24, 0x25	; 37
     9b0:	80 61       	ori	r24, 0x10	; 16
     9b2:	85 bd       	out	0x25, r24	; 37
     9b4:	85 b5       	in	r24, 0x25	; 37
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	85 bd       	out	0x25, r24	; 37
     9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <TMR2_init+0x78>
     9bc:	85 b5       	in	r24, 0x25	; 37
     9be:	8f 7e       	andi	r24, 0xEF	; 239
     9c0:	85 bd       	out	0x25, r24	; 37
     9c2:	85 b5       	in	r24, 0x25	; 37
     9c4:	80 62       	ori	r24, 0x20	; 32
     9c6:	85 bd       	out	0x25, r24	; 37
     9c8:	85 b5       	in	r24, 0x25	; 37
     9ca:	80 64       	ori	r24, 0x40	; 64
     9cc:	85 bd       	out	0x25, r24	; 37
     9ce:	85 b5       	in	r24, 0x25	; 37
     9d0:	87 7f       	andi	r24, 0xF7	; 247
     9d2:	85 bd       	out	0x25, r24	; 37
     9d4:	44 23       	and	r20, r20
     9d6:	19 f0       	breq	.+6      	; 0x9de <TMR2_init+0x8e>
     9d8:	41 30       	cpi	r20, 0x01	; 1
     9da:	41 f0       	breq	.+16     	; 0x9ec <TMR2_init+0x9c>
     9dc:	08 95       	ret
     9de:	85 b5       	in	r24, 0x25	; 37
     9e0:	80 61       	ori	r24, 0x10	; 16
     9e2:	85 bd       	out	0x25, r24	; 37
     9e4:	85 b5       	in	r24, 0x25	; 37
     9e6:	80 62       	ori	r24, 0x20	; 32
     9e8:	85 bd       	out	0x25, r24	; 37
     9ea:	08 95       	ret
     9ec:	85 b5       	in	r24, 0x25	; 37
     9ee:	8f 7e       	andi	r24, 0xEF	; 239
     9f0:	85 bd       	out	0x25, r24	; 37
     9f2:	85 b5       	in	r24, 0x25	; 37
     9f4:	80 62       	ori	r24, 0x20	; 32
     9f6:	85 bd       	out	0x25, r24	; 37
     9f8:	08 95       	ret

000009fa <TMR2_start>:
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	87 30       	cpi	r24, 0x07	; 7
     9fe:	91 05       	cpc	r25, r1
     a00:	08 f0       	brcs	.+2      	; 0xa04 <TMR2_start+0xa>
     a02:	4a c0       	rjmp	.+148    	; 0xa98 <TMR2_start+0x9e>
     a04:	fc 01       	movw	r30, r24
     a06:	e6 5d       	subi	r30, 0xD6	; 214
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__tablejump2__>
     a0e:	85 b5       	in	r24, 0x25	; 37
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	85 bd       	out	0x25, r24	; 37
     a14:	85 b5       	in	r24, 0x25	; 37
     a16:	8d 7f       	andi	r24, 0xFD	; 253
     a18:	85 bd       	out	0x25, r24	; 37
     a1a:	85 b5       	in	r24, 0x25	; 37
     a1c:	8b 7f       	andi	r24, 0xFB	; 251
     a1e:	85 bd       	out	0x25, r24	; 37
     a20:	08 95       	ret
     a22:	85 b5       	in	r24, 0x25	; 37
     a24:	8e 7f       	andi	r24, 0xFE	; 254
     a26:	85 bd       	out	0x25, r24	; 37
     a28:	85 b5       	in	r24, 0x25	; 37
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	85 bd       	out	0x25, r24	; 37
     a2e:	85 b5       	in	r24, 0x25	; 37
     a30:	8b 7f       	andi	r24, 0xFB	; 251
     a32:	85 bd       	out	0x25, r24	; 37
     a34:	08 95       	ret
     a36:	85 b5       	in	r24, 0x25	; 37
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	85 bd       	out	0x25, r24	; 37
     a3c:	85 b5       	in	r24, 0x25	; 37
     a3e:	82 60       	ori	r24, 0x02	; 2
     a40:	85 bd       	out	0x25, r24	; 37
     a42:	85 b5       	in	r24, 0x25	; 37
     a44:	8b 7f       	andi	r24, 0xFB	; 251
     a46:	85 bd       	out	0x25, r24	; 37
     a48:	08 95       	ret
     a4a:	85 b5       	in	r24, 0x25	; 37
     a4c:	8e 7f       	andi	r24, 0xFE	; 254
     a4e:	85 bd       	out	0x25, r24	; 37
     a50:	85 b5       	in	r24, 0x25	; 37
     a52:	8d 7f       	andi	r24, 0xFD	; 253
     a54:	85 bd       	out	0x25, r24	; 37
     a56:	85 b5       	in	r24, 0x25	; 37
     a58:	84 60       	ori	r24, 0x04	; 4
     a5a:	85 bd       	out	0x25, r24	; 37
     a5c:	08 95       	ret
     a5e:	85 b5       	in	r24, 0x25	; 37
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	85 bd       	out	0x25, r24	; 37
     a64:	85 b5       	in	r24, 0x25	; 37
     a66:	8d 7f       	andi	r24, 0xFD	; 253
     a68:	85 bd       	out	0x25, r24	; 37
     a6a:	85 b5       	in	r24, 0x25	; 37
     a6c:	84 60       	ori	r24, 0x04	; 4
     a6e:	85 bd       	out	0x25, r24	; 37
     a70:	08 95       	ret
     a72:	85 b5       	in	r24, 0x25	; 37
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	85 bd       	out	0x25, r24	; 37
     a78:	85 b5       	in	r24, 0x25	; 37
     a7a:	82 60       	ori	r24, 0x02	; 2
     a7c:	85 bd       	out	0x25, r24	; 37
     a7e:	85 b5       	in	r24, 0x25	; 37
     a80:	84 60       	ori	r24, 0x04	; 4
     a82:	85 bd       	out	0x25, r24	; 37
     a84:	08 95       	ret
     a86:	85 b5       	in	r24, 0x25	; 37
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	85 bd       	out	0x25, r24	; 37
     a8c:	85 b5       	in	r24, 0x25	; 37
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	85 bd       	out	0x25, r24	; 37
     a92:	85 b5       	in	r24, 0x25	; 37
     a94:	84 60       	ori	r24, 0x04	; 4
     a96:	85 bd       	out	0x25, r24	; 37
     a98:	08 95       	ret

00000a9a <TMR2_generatePWM>:
     a9a:	85 36       	cpi	r24, 0x65	; 101
     a9c:	08 f0       	brcs	.+2      	; 0xaa0 <TMR2_generatePWM+0x6>
     a9e:	84 e6       	ldi	r24, 0x64	; 100
     aa0:	66 23       	and	r22, r22
     aa2:	71 f0       	breq	.+28     	; 0xac0 <TMR2_generatePWM+0x26>
     aa4:	61 30       	cpi	r22, 0x01	; 1
     aa6:	e9 f4       	brne	.+58     	; 0xae2 <TMR2_generatePWM+0x48>
     aa8:	98 2f       	mov	r25, r24
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	64 e6       	ldi	r22, 0x64	; 100
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
     ab4:	61 50       	subi	r22, 0x01	; 1
     ab6:	63 bd       	out	0x23, r22	; 35
     ab8:	84 2f       	mov	r24, r20
     aba:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TMR2_start>
     abe:	08 95       	ret
     ac0:	64 e6       	ldi	r22, 0x64	; 100
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	9b 01       	movw	r18, r22
     ac6:	28 1b       	sub	r18, r24
     ac8:	31 09       	sbc	r19, r1
     aca:	5f ef       	ldi	r21, 0xFF	; 255
     acc:	52 9f       	mul	r21, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	53 9f       	mul	r21, r19
     ad2:	90 0d       	add	r25, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
     ada:	63 bd       	out	0x23, r22	; 35
     adc:	84 2f       	mov	r24, r20
     ade:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TMR2_start>
     ae2:	08 95       	ret

00000ae4 <TMR2_stop>:
     ae4:	85 b5       	in	r24, 0x25	; 37
     ae6:	8e 7f       	andi	r24, 0xFE	; 254
     ae8:	85 bd       	out	0x25, r24	; 37
     aea:	85 b5       	in	r24, 0x25	; 37
     aec:	8d 7f       	andi	r24, 0xFD	; 253
     aee:	85 bd       	out	0x25, r24	; 37
     af0:	85 b5       	in	r24, 0x25	; 37
     af2:	8b 7f       	andi	r24, 0xFB	; 251
     af4:	85 bd       	out	0x25, r24	; 37
     af6:	08 95       	ret

00000af8 <__vector_5>:
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <overflowCounter.2197>
     b1e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <overflowCounter.2197+0x1>
     b22:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <overflowCounter.2197+0x2>
     b26:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <overflowCounter.2197+0x3>
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	a1 1d       	adc	r26, r1
     b2e:	b1 1d       	adc	r27, r1
     b30:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <overflowCounter.2197>
     b34:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <overflowCounter.2197+0x1>
     b38:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <overflowCounter.2197+0x2>
     b3c:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <overflowCounter.2197+0x3>
     b40:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <PRV_u16CounterVal_TMR2>
     b44:	50 91 23 02 	lds	r21, 0x0223	; 0x800223 <PRV_u16CounterVal_TMR2+0x1>
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	84 17       	cp	r24, r20
     b4e:	95 07       	cpc	r25, r21
     b50:	a6 07       	cpc	r26, r22
     b52:	b7 07       	cpc	r27, r23
     b54:	78 f0       	brcs	.+30     	; 0xb74 <__vector_5+0x7c>
     b56:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <overflowCounter.2197>
     b5a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <overflowCounter.2197+0x1>
     b5e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <overflowCounter.2197+0x2>
     b62:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <overflowCounter.2197+0x3>
     b66:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <PRV_ptrFuncCallBack_OVF_TMR2>
     b6a:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <PRV_ptrFuncCallBack_OVF_TMR2+0x1>
     b6e:	30 97       	sbiw	r30, 0x00	; 0
     b70:	09 f0       	breq	.+2      	; 0xb74 <__vector_5+0x7c>
     b72:	09 95       	icall
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <__vector_4>:
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	2f 93       	push	r18
     ba2:	3f 93       	push	r19
     ba4:	4f 93       	push	r20
     ba6:	5f 93       	push	r21
     ba8:	6f 93       	push	r22
     baa:	7f 93       	push	r23
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
     bb0:	af 93       	push	r26
     bb2:	bf 93       	push	r27
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
     bb8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     bbc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
     bc6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
     bca:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <PRV_u16CounterVal_TMR2>
     bce:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <PRV_u16CounterVal_TMR2+0x1>
     bd2:	82 17       	cp	r24, r18
     bd4:	93 07       	cpc	r25, r19
     bd6:	58 f0       	brcs	.+22     	; 0xbee <__vector_4+0x58>
     bd8:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
     bdc:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
     be0:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <PRV_ptrFuncCallBack_CTC_TMR2>
     be4:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <PRV_ptrFuncCallBack_CTC_TMR2+0x1>
     be8:	30 97       	sbiw	r30, 0x00	; 0
     bea:	09 f0       	breq	.+2      	; 0xbee <__vector_4+0x58>
     bec:	09 95       	icall
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti

00000c10 <LCD_displayChar>:
     c10:	cf 93       	push	r28
     c12:	c8 2f       	mov	r28, r24
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     c28:	8c 2f       	mov	r24, r28
     c2a:	82 95       	swap	r24
     c2c:	8f 70       	andi	r24, 0x0F	; 15
     c2e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PRV_writeHalfPort>
     c32:	0e 94 92 01 	call	0x324	; 0x324 <PRV_enableTriggerWrite>
     c36:	8c 2f       	mov	r24, r28
     c38:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PRV_writeHalfPort>
     c3c:	0e 94 92 01 	call	0x324	; 0x324 <PRV_enableTriggerWrite>
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <LCD_sendCommand>:
     c44:	cf 93       	push	r28
     c46:	c8 2f       	mov	r28, r24
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     c5c:	8c 2f       	mov	r24, r28
     c5e:	82 95       	swap	r24
     c60:	8f 70       	andi	r24, 0x0F	; 15
     c62:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PRV_writeHalfPort>
     c66:	0e 94 92 01 	call	0x324	; 0x324 <PRV_enableTriggerWrite>
     c6a:	8c 2f       	mov	r24, r28
     c6c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PRV_writeHalfPort>
     c70:	0e 94 92 01 	call	0x324	; 0x324 <PRV_enableTriggerWrite>
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <LCD_init>:
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	64 e0       	ldi	r22, 0x04	; 4
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	65 e0       	ldi	r22, 0x05	; 5
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	66 e0       	ldi	r22, 0x06	; 6
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	67 e0       	ldi	r22, 0x07	; 7
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
     cbe:	2f e7       	ldi	r18, 0x7F	; 127
     cc0:	85 eb       	ldi	r24, 0xB5	; 181
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <LCD_init+0x4c>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <LCD_init+0x56>
     cce:	00 00       	nop
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <PRV_writeHalfPort>
     cea:	0e 94 92 01 	call	0x324	; 0x324 <PRV_enableTriggerWrite>
     cee:	88 e2       	ldi	r24, 0x28	; 40
     cf0:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
     cf4:	20 ef       	ldi	r18, 0xF0	; 240
     cf6:	2a 95       	dec	r18
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <LCD_init+0x7e>
     cfa:	8f e0       	ldi	r24, 0x0F	; 15
     cfc:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
     d00:	80 ef       	ldi	r24, 0xF0	; 240
     d02:	8a 95       	dec	r24
     d04:	f1 f7       	brne	.-4      	; 0xd02 <LCD_init+0x8a>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
     d0c:	8f e3       	ldi	r24, 0x3F	; 63
     d0e:	9f e1       	ldi	r25, 0x1F	; 31
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <LCD_init+0x98>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <LCD_init+0x9e>
     d16:	00 00       	nop
     d18:	86 e0       	ldi	r24, 0x06	; 6
     d1a:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
     d1e:	08 95       	ret

00000d20 <LCD_displayString>:
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	29 f4       	brne	.+10     	; 0xd34 <LCD_displayString+0x14>
     d2a:	0c c0       	rjmp	.+24     	; 0xd44 <LCD_displayString+0x24>
     d2c:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
     d30:	cf 5f       	subi	r28, 0xFF	; 255
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <LCD_displayString+0x18>
     d34:	8c 01       	movw	r16, r24
     d36:	c0 e0       	ldi	r28, 0x00	; 0
     d38:	f8 01       	movw	r30, r16
     d3a:	ec 0f       	add	r30, r28
     d3c:	f1 1d       	adc	r31, r1
     d3e:	80 81       	ld	r24, Z
     d40:	81 11       	cpse	r24, r1
     d42:	f4 cf       	rjmp	.-24     	; 0xd2c <LCD_displayString+0xc>
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <LCD_displayNumber>:
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	60 97       	sbiw	r28, 0x10	; 16
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	4b 01       	movw	r8, r22
     d7e:	5c 01       	movw	r10, r24
     d80:	04 2f       	mov	r16, r20
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	a9 01       	movw	r20, r18
     d88:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__cmpsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	4c f4       	brge	.+18     	; 0xda2 <LCD_displayNumber+0x56>
     d90:	b7 fa       	bst	r11, 7
     d92:	b0 94       	com	r11
     d94:	b7 f8       	bld	r11, 7
     d96:	b0 94       	com	r11
     d98:	41 2c       	mov	r4, r1
     d9a:	51 2c       	mov	r5, r1
     d9c:	32 01       	movw	r6, r4
     d9e:	43 94       	inc	r4
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <LCD_displayNumber+0x5c>
     da2:	41 2c       	mov	r4, r1
     da4:	51 2c       	mov	r5, r1
     da6:	32 01       	movw	r6, r4
     da8:	c5 01       	movw	r24, r10
     daa:	b4 01       	movw	r22, r8
     dac:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__fixunssfsi>
     db0:	6b 01       	movw	r12, r22
     db2:	7c 01       	movw	r14, r24
     db4:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	c5 01       	movw	r24, r10
     dbe:	b4 01       	movw	r22, r8
     dc0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__subsf3>
     dc4:	4b 01       	movw	r8, r22
     dc6:	5c 01       	movw	r10, r24
     dc8:	c1 14       	cp	r12, r1
     dca:	d1 04       	cpc	r13, r1
     dcc:	e1 04       	cpc	r14, r1
     dce:	f1 04       	cpc	r15, r1
     dd0:	d1 f4       	brne	.+52     	; 0xe06 <LCD_displayNumber+0xba>
     dd2:	80 e3       	ldi	r24, 0x30	; 48
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	11 e0       	ldi	r17, 0x01	; 1
     dd8:	1c c0       	rjmp	.+56     	; 0xe12 <LCD_displayNumber+0xc6>
     dda:	c7 01       	movw	r24, r14
     ddc:	b6 01       	movw	r22, r12
     dde:	2a e0       	ldi	r18, 0x0A	; 10
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
     dea:	e1 e0       	ldi	r30, 0x01	; 1
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ec 0f       	add	r30, r28
     df0:	fd 1f       	adc	r31, r29
     df2:	e1 0f       	add	r30, r17
     df4:	f1 1d       	adc	r31, r1
     df6:	60 5d       	subi	r22, 0xD0	; 208
     df8:	60 83       	st	Z, r22
     dfa:	c2 2e       	mov	r12, r18
     dfc:	d3 2e       	mov	r13, r19
     dfe:	e4 2e       	mov	r14, r20
     e00:	f5 2e       	mov	r15, r21
     e02:	1f 5f       	subi	r17, 0xFF	; 255
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <LCD_displayNumber+0xbc>
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	c1 14       	cp	r12, r1
     e0a:	d1 04       	cpc	r13, r1
     e0c:	e1 04       	cpc	r14, r1
     e0e:	f1 04       	cpc	r15, r1
     e10:	21 f7       	brne	.-56     	; 0xdda <LCD_displayNumber+0x8e>
     e12:	45 28       	or	r4, r5
     e14:	46 28       	or	r4, r6
     e16:	47 28       	or	r4, r7
     e18:	49 f0       	breq	.+18     	; 0xe2c <LCD_displayNumber+0xe0>
     e1a:	e1 e0       	ldi	r30, 0x01	; 1
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	ec 0f       	add	r30, r28
     e20:	fd 1f       	adc	r31, r29
     e22:	e1 0f       	add	r30, r17
     e24:	f1 1d       	adc	r31, r1
     e26:	8d e2       	ldi	r24, 0x2D	; 45
     e28:	80 83       	st	Z, r24
     e2a:	1f 5f       	subi	r17, 0xFF	; 255
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	91 0f       	add	r25, r17
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	12 c0       	rjmp	.+36     	; 0xe58 <LCD_displayNumber+0x10c>
     e34:	a1 e0       	ldi	r26, 0x01	; 1
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ac 0f       	add	r26, r28
     e3a:	bd 1f       	adc	r27, r29
     e3c:	a8 0f       	add	r26, r24
     e3e:	b1 1d       	adc	r27, r1
     e40:	2c 91       	ld	r18, X
     e42:	e1 e0       	ldi	r30, 0x01	; 1
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	ec 0f       	add	r30, r28
     e48:	fd 1f       	adc	r31, r29
     e4a:	e9 0f       	add	r30, r25
     e4c:	f1 1d       	adc	r31, r1
     e4e:	30 81       	ld	r19, Z
     e50:	3c 93       	st	X, r19
     e52:	20 83       	st	Z, r18
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	91 50       	subi	r25, 0x01	; 1
     e58:	89 17       	cp	r24, r25
     e5a:	60 f3       	brcs	.-40     	; 0xe34 <LCD_displayNumber+0xe8>
     e5c:	00 23       	and	r16, r16
     e5e:	b1 f1       	breq	.+108    	; 0xecc <LCD_displayNumber+0x180>
     e60:	e1 e0       	ldi	r30, 0x01	; 1
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	ec 0f       	add	r30, r28
     e66:	fd 1f       	adc	r31, r29
     e68:	e1 0f       	add	r30, r17
     e6a:	f1 1d       	adc	r31, r1
     e6c:	8e e2       	ldi	r24, 0x2E	; 46
     e6e:	80 83       	st	Z, r24
     e70:	1f 5f       	subi	r17, 0xFF	; 255
     e72:	27 c0       	rjmp	.+78     	; 0xec2 <LCD_displayNumber+0x176>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
     e84:	4b 01       	movw	r8, r22
     e86:	5c 01       	movw	r10, r24
     e88:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__fixunssfsi>
     e8c:	ee 24       	eor	r14, r14
     e8e:	e3 94       	inc	r14
     e90:	e1 0e       	add	r14, r17
     e92:	e1 e0       	ldi	r30, 0x01	; 1
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	ec 0f       	add	r30, r28
     e98:	fd 1f       	adc	r31, r29
     e9a:	e1 0f       	add	r30, r17
     e9c:	f1 1d       	adc	r31, r1
     e9e:	80 e3       	ldi	r24, 0x30	; 48
     ea0:	86 0f       	add	r24, r22
     ea2:	80 83       	st	Z, r24
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__floatsisf>
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	c5 01       	movw	r24, r10
     eb4:	b4 01       	movw	r22, r8
     eb6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__subsf3>
     eba:	4b 01       	movw	r8, r22
     ebc:	5c 01       	movw	r10, r24
     ebe:	0f 2d       	mov	r16, r15
     ec0:	1e 2d       	mov	r17, r14
     ec2:	ff 24       	eor	r15, r15
     ec4:	fa 94       	dec	r15
     ec6:	f0 0e       	add	r15, r16
     ec8:	01 11       	cpse	r16, r1
     eca:	d4 cf       	rjmp	.-88     	; 0xe74 <LCD_displayNumber+0x128>
     ecc:	e1 e0       	ldi	r30, 0x01	; 1
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ec 0f       	add	r30, r28
     ed2:	fd 1f       	adc	r31, r29
     ed4:	e1 0f       	add	r30, r17
     ed6:	f1 1d       	adc	r31, r1
     ed8:	10 82       	st	Z, r1
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
     ee2:	60 96       	adiw	r28, 0x10	; 16
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	7f 90       	pop	r7
     f08:	6f 90       	pop	r6
     f0a:	5f 90       	pop	r5
     f0c:	4f 90       	pop	r4
     f0e:	08 95       	ret

00000f10 <LCD_clear>:
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
     f16:	8f e3       	ldi	r24, 0x3F	; 63
     f18:	9f e1       	ldi	r25, 0x1F	; 31
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_clear+0xa>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <LCD_clear+0x10>
     f20:	00 00       	nop
     f22:	08 95       	ret

00000f24 <LCD_moveCursor>:

void LCD_moveCursor(u8 copy_u8Row, u8 copy_u8Column) {
	u8 address;

	// Calculate the address based on the row and column
	switch (copy_u8Row) {
     f24:	88 23       	and	r24, r24
     f26:	19 f0       	breq	.+6      	; 0xf2e <LCD_moveCursor+0xa>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	29 f4       	brne	.+10     	; 0xf36 <LCD_moveCursor+0x12>
		case 0:
		address = 0x00 + copy_u8Column;
		break;
		case 1:
		address = 0x40 + copy_u8Column;
     f2c:	60 5c       	subi	r22, 0xC0	; 192
		// Handle invalid row input if necessary
		return;
	}

	// Send the command to set the DDRAM address
	LCD_sendCommand(0x80 | address);
     f2e:	86 2f       	mov	r24, r22
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
     f36:	08 95       	ret

00000f38 <LCD_createAndDisplayChar>:
}

void LCD_createAndDisplayChar(u8 copy_u8CgramLocation, u8* copy_u8CustomChar, u8 copy_u8Row, u8 copy_u8Col) {
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	8b 01       	movw	r16, r22
     f46:	e4 2e       	mov	r14, r20
     f48:	d2 2f       	mov	r29, r18
	    // Location should be within the range of 0-7 for CGRAM
	    copy_u8CgramLocation &= 0x07;
     f4a:	87 70       	andi	r24, 0x07	; 7
     f4c:	f8 2e       	mov	r15, r24
	    
	    // Set CGRAM address
	    LCD_sendCommand(0x40 | (copy_u8CgramLocation << 3));
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
	    
	    // Write the custom character data to CGRAM
	    for (u8 i = 0; i < 8; i++) {
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <LCD_createAndDisplayChar+0x3c>
		    LCD_displayChar(copy_u8CustomChar[i]);
     f66:	f8 01       	movw	r30, r16
     f68:	ec 0f       	add	r30, r28
     f6a:	f1 1d       	adc	r31, r1
     f6c:	80 81       	ld	r24, Z
     f6e:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
	    
	    // Set CGRAM address
	    LCD_sendCommand(0x40 | (copy_u8CgramLocation << 3));
	    
	    // Write the custom character data to CGRAM
	    for (u8 i = 0; i < 8; i++) {
     f72:	cf 5f       	subi	r28, 0xFF	; 255
     f74:	c8 30       	cpi	r28, 0x08	; 8
     f76:	b8 f3       	brcs	.-18     	; 0xf66 <LCD_createAndDisplayChar+0x2e>
		    LCD_displayChar(copy_u8CustomChar[i]);
	    }

	    // Set DDRAM address (to position the cursor)
	    u8 address;
	    switch(copy_u8Row) {
     f78:	ee 20       	and	r14, r14
     f7a:	21 f0       	breq	.+8      	; 0xf84 <LCD_createAndDisplayChar+0x4c>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	e8 16       	cp	r14, r24
     f80:	21 f0       	breq	.+8      	; 0xf8a <LCD_createAndDisplayChar+0x52>
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <LCD_createAndDisplayChar+0x58>
		    case 0:
		    address = 0x80 + copy_u8Col;
     f84:	80 e8       	ldi	r24, 0x80	; 128
     f86:	8d 0f       	add	r24, r29
		    break;
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <LCD_createAndDisplayChar+0x5c>
		    case 1:
		    address = 0xC0 + copy_u8Col;
     f8a:	80 ec       	ldi	r24, 0xC0	; 192
     f8c:	8d 0f       	add	r24, r29
		    break;
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <LCD_createAndDisplayChar+0x5c>
		    default:
		    address = 0x80 + copy_u8Col; // Default to first row if row is invalid
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	8d 0f       	add	r24, r29
		    break;
	    }
	    LCD_sendCommand(address);
     f94:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>

	    // Display the custom character from CGRAM
	    LCD_displayChar(copy_u8CgramLocation);
     f98:	8f 2d       	mov	r24, r15
     f9a:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	08 95       	ret

00000fac <LM35_getVal>:
#include "../../../MCAL/ADC_DRIVER/ADC_DRIVER/ADC_REG.h"
#include "../../../MCAL/ADC_DRIVER/ADC_DRIVER/ADC_PROGRAM.h"
#include "LM35_PROGRAM.h"
#include <util/delay.h>

f32 LM35_getVal(u8 copy_u8Channel) {
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	d8 2f       	mov	r29, r24
    u16 sum = 0;
    u16 local_u16AdcVal;
    const u8 numReadings = 10; // Number of readings to average

    for (u8 i = 0; i < numReadings; i++) {
     fb6:	c0 e0       	ldi	r28, 0x00	; 0
#include "../../../MCAL/ADC_DRIVER/ADC_DRIVER/ADC_PROGRAM.h"
#include "LM35_PROGRAM.h"
#include <util/delay.h>

f32 LM35_getVal(u8 copy_u8Channel) {
    u16 sum = 0;
     fb8:	00 e0       	ldi	r16, 0x00	; 0
     fba:	10 e0       	ldi	r17, 0x00	; 0
    u16 local_u16AdcVal;
    const u8 numReadings = 10; // Number of readings to average

    for (u8 i = 0; i < numReadings; i++) {
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <LM35_getVal+0x2a>
        local_u16AdcVal = ADC_getValue(copy_u8Channel);
     fbe:	8d 2f       	mov	r24, r29
     fc0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>
        sum += local_u16AdcVal;
     fc4:	08 0f       	add	r16, r24
     fc6:	19 1f       	adc	r17, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fc8:	8f eb       	ldi	r24, 0xBF	; 191
     fca:	9d e5       	ldi	r25, 0x5D	; 93
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <LM35_getVal+0x20>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <LM35_getVal+0x26>
     fd2:	00 00       	nop
f32 LM35_getVal(u8 copy_u8Channel) {
    u16 sum = 0;
    u16 local_u16AdcVal;
    const u8 numReadings = 10; // Number of readings to average

    for (u8 i = 0; i < numReadings; i++) {
     fd4:	cf 5f       	subi	r28, 0xFF	; 255
     fd6:	ca 30       	cpi	r28, 0x0A	; 10
     fd8:	90 f3       	brcs	.-28     	; 0xfbe <LM35_getVal+0x12>
        local_u16AdcVal = ADC_getValue(copy_u8Channel);
        sum += local_u16AdcVal;
        _delay_ms(6); // Short delay between readings
    }

    local_u16AdcVal = sum / numReadings;
     fda:	98 01       	movw	r18, r16
     fdc:	ad ec       	ldi	r26, 0xCD	; 205
     fde:	bc ec       	ldi	r27, 0xCC	; 204
     fe0:	0e 94 ba 10 	call	0x2174	; 0x2174 <__umulhisi3>
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	96 95       	lsr	r25
     fee:	87 95       	ror	r24

    // Convert the averaged ADC value to temperature using internal 2.56V reference
    f32 voltage = (local_u16AdcVal * VOLTAGE_REF) / 1024.0;
     ff0:	bc 01       	movw	r22, r24
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	68 0f       	add	r22, r24
     ffc:	79 1f       	adc	r23, r25
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5a e3       	ldi	r21, 0x3A	; 58
    100e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>
    f32 temperature = voltage * 100.0;
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	48 ec       	ldi	r20, 0xC8	; 200
    1018:	52 e4       	ldi	r21, 0x42	; 66
    101a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>

    return temperature;
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <SWITCH_init>:

/* HAL Layer */
#include "SWITCH_PROGRAM.h"

void SWITCH_init(u8 copy_u8SwitchPort, u8 copy_u8SwitchPin) {
	DIO_setPinDirection(copy_u8SwitchPort, copy_u8SwitchPin, DIO_PIN_INPUT);
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
    102e:	08 95       	ret

00001030 <SWITCH_getState>:
}

u8 SWITCH_getState(u8 copy_u8SwitchPort, u8 copy_u8SwitchPin, u8 copy_u8SwitchConnectionType) {
    1030:	cf 93       	push	r28
	// Variable to store the current switch state
	u8 u8LocalSwitchState;

	switch (copy_u8SwitchConnectionType) {
    1032:	44 23       	and	r20, r20
    1034:	19 f0       	breq	.+6      	; 0x103c <SWITCH_getState+0xc>
    1036:	41 30       	cpi	r20, 0x01	; 1
    1038:	91 f1       	breq	.+100    	; 0x109e <SWITCH_getState+0x6e>
    103a:	6c c0       	rjmp	.+216    	; 0x1114 <SWITCH_getState+0xe4>
	case SWITCH_INPUT_PULLDOWN:
		switch (copy_u8SwitchPort) {
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	89 f0       	breq	.+34     	; 0x1062 <SWITCH_getState+0x32>
    1040:	28 f0       	brcs	.+10     	; 0x104c <SWITCH_getState+0x1c>
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	c9 f0       	breq	.+50     	; 0x1078 <SWITCH_getState+0x48>
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	09 f1       	breq	.+66     	; 0x108c <SWITCH_getState+0x5c>
    104a:	64 c0       	rjmp	.+200    	; 0x1114 <SWITCH_getState+0xe4>
		case DIO_PORTA:
			switch (DIO_readPinVal(DIO_PORTA, copy_u8SwitchPin)) {
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    1052:	88 23       	and	r24, r24
    1054:	09 f4       	brne	.+2      	; 0x1058 <SWITCH_getState+0x28>
    1056:	4f c0       	rjmp	.+158    	; 0x10f6 <SWITCH_getState+0xc6>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <SWITCH_getState+0x2e>
    105c:	5b c0       	rjmp	.+182    	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_PRESSED;
    105e:	c1 e0       	ldi	r28, 0x01	; 1
				break;
    1060:	59 c0       	rjmp	.+178    	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTB:
			switch (DIO_readPinVal(DIO_PORTB, copy_u8SwitchPin)) {
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    1068:	88 23       	and	r24, r24
    106a:	09 f4       	brne	.+2      	; 0x106e <SWITCH_getState+0x3e>
    106c:	46 c0       	rjmp	.+140    	; 0x10fa <SWITCH_getState+0xca>
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	09 f0       	breq	.+2      	; 0x1074 <SWITCH_getState+0x44>
    1072:	50 c0       	rjmp	.+160    	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_PRESSED;
    1074:	c1 e0       	ldi	r28, 0x01	; 1
				break;
    1076:	4e c0       	rjmp	.+156    	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTC:
			switch (DIO_readPinVal(DIO_PORTC, copy_u8SwitchPin)) {
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    107e:	88 23       	and	r24, r24
    1080:	f1 f1       	breq	.+124    	; 0x10fe <SWITCH_getState+0xce>
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	09 f0       	breq	.+2      	; 0x1088 <SWITCH_getState+0x58>
    1086:	46 c0       	rjmp	.+140    	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_PRESSED;
    1088:	c1 e0       	ldi	r28, 0x01	; 1
				break;
    108a:	44 c0       	rjmp	.+136    	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTD:
			switch (DIO_readPinVal(DIO_PORTD, copy_u8SwitchPin)) {
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    1092:	88 23       	and	r24, r24
    1094:	b1 f1       	breq	.+108    	; 0x1102 <SWITCH_getState+0xd2>
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	e9 f5       	brne	.+122    	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_PRESSED;
    109a:	c1 e0       	ldi	r28, 0x01	; 1
				break;
    109c:	3b c0       	rjmp	.+118    	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		}
		break;
	case SWITCH_INPUT_PULLUP:
		switch (copy_u8SwitchPort) {
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	79 f0       	breq	.+30     	; 0x10c0 <SWITCH_getState+0x90>
    10a2:	28 f0       	brcs	.+10     	; 0x10ae <SWITCH_getState+0x7e>
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	a9 f0       	breq	.+42     	; 0x10d2 <SWITCH_getState+0xa2>
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	e1 f0       	breq	.+56     	; 0x10e4 <SWITCH_getState+0xb4>
    10ac:	33 c0       	rjmp	.+102    	; 0x1114 <SWITCH_getState+0xe4>
		case DIO_PORTA:
			switch (DIO_readPinVal(DIO_PORTA, copy_u8SwitchPin)) {
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    10b4:	88 23       	and	r24, r24
    10b6:	39 f1       	breq	.+78     	; 0x1106 <SWITCH_getState+0xd6>
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	61 f5       	brne	.+88     	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
				break;
    10be:	2a c0       	rjmp	.+84     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTB:
			switch (DIO_readPinVal(DIO_PORTB, copy_u8SwitchPin)) {
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    10c6:	88 23       	and	r24, r24
    10c8:	01 f1       	breq	.+64     	; 0x110a <SWITCH_getState+0xda>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	19 f5       	brne	.+70     	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
				break;
    10d0:	21 c0       	rjmp	.+66     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTC:
			switch (DIO_readPinVal(DIO_PORTC, copy_u8SwitchPin)) {
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    10d8:	88 23       	and	r24, r24
    10da:	c9 f0       	breq	.+50     	; 0x110e <SWITCH_getState+0xde>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	d1 f4       	brne	.+52     	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
				break;
    10e2:	18 c0       	rjmp	.+48     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTD:
			switch (DIO_readPinVal(DIO_PORTD, copy_u8SwitchPin)) {
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	0e 94 42 01 	call	0x284	; 0x284 <DIO_readPinVal>
    10ea:	88 23       	and	r24, r24
    10ec:	91 f0       	breq	.+36     	; 0x1112 <SWITCH_getState+0xe2>
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	89 f4       	brne	.+34     	; 0x1114 <SWITCH_getState+0xe4>
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
				break;
			case 1:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
				break;
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <SWITCH_getState+0xe4>
	case SWITCH_INPUT_PULLDOWN:
		switch (copy_u8SwitchPort) {
		case DIO_PORTA:
			switch (DIO_readPinVal(DIO_PORTA, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTB:
			switch (DIO_readPinVal(DIO_PORTB, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10fa:	c0 e0       	ldi	r28, 0x00	; 0
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTC:
			switch (DIO_readPinVal(DIO_PORTC, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTD:
			switch (DIO_readPinVal(DIO_PORTD, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_NOT_PRESSED;
    1102:	c0 e0       	ldi	r28, 0x00	; 0
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <SWITCH_getState+0xe4>
	case SWITCH_INPUT_PULLUP:
		switch (copy_u8SwitchPort) {
		case DIO_PORTA:
			switch (DIO_readPinVal(DIO_PORTA, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
    1106:	c1 e0       	ldi	r28, 0x01	; 1
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTB:
			switch (DIO_readPinVal(DIO_PORTB, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
    110a:	c1 e0       	ldi	r28, 0x01	; 1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTC:
			switch (DIO_readPinVal(DIO_PORTC, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
    110e:	c1 e0       	ldi	r28, 0x01	; 1
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <SWITCH_getState+0xe4>
			}
			break;
		case DIO_PORTD:
			switch (DIO_readPinVal(DIO_PORTD, copy_u8SwitchPin)) {
			case 0:
				u8LocalSwitchState = SWITCH_PRESSED;
    1112:	c1 e0       	ldi	r28, 0x01	; 1
		}
		break;
	}

	return u8LocalSwitchState;
}
    1114:	8c 2f       	mov	r24, r28
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <main>:

// Custom character for the cursor to display on screen
u8 arrowCursor[] = {0b01000, 0b01100, 0b01110, 0b11111,
                    0b11111, 0b01110, 0b01100, 0b01000};

int main(void) {
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <main+0x6>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
   // function to initialize all pins connected
   SPSV2_init();
    1124:	0e 94 cc 08 	call	0x1198	; 0x1198 <SPSV2_init>

   // Initializing All the HAL/MCAL components connected
   GIE_enable();
    1128:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <GIE_enable>
   LCD_init();
    112c:	0e 94 3c 06 	call	0xc78	; 0xc78 <LCD_init>
   ADC_init(ADC_REFERENCE_AVCC);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	0e 94 a3 01 	call	0x346	; 0x346 <ADC_init>
   TMR0_init(TMR0_FASTPWM_MODE, TMR0_PRELOAD_CLR, TMR0_PWM_NON_INVERT);
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <TMR0_init>

   // Calling the Start up function once
   SPSV2_startProg();
    1140:	0e 94 16 09 	call	0x122c	; 0x122c <SPSV2_startProg>

   // Defining variables
   u8 local_u8CurrentCursorPos = 0, local_u8CurrentScreenPos = 0;
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	1a 82       	std	Y+2, r1	; 0x02

   while (1) {
      // Read ADC value from channel 1
      u16 local_u16AdcValue = ADC_getValue(ADC_CHANNEL1);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>
    114e:	8c 01       	movw	r16, r24

      // Read Temperature
      SPSV2_readTemp();
    1150:	0e 94 3d 09 	call	0x127a	; 0x127a <SPSV2_readTemp>

      // Calling the function to update the screen and cursor position
      SPSV2_updateScreenPosition(local_u16AdcValue, &local_u8CurrentCursorPos,
    1154:	ae 01       	movw	r20, r28
    1156:	4e 5f       	subi	r20, 0xFE	; 254
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	be 01       	movw	r22, r28
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	c8 01       	movw	r24, r16
    1162:	0e 94 a1 09 	call	0x1342	; 0x1342 <SPSV2_updateScreenPosition>
                                 &local_u8CurrentScreenPos);

      // Calling the Print menu function
      SPSV2_printMenu(local_u8CurrentCursorPos, local_u8CurrentScreenPos);
    1166:	6a 81       	ldd	r22, Y+2	; 0x02
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <SPSV2_printMenu>
      LCD_createAndDisplayChar(0, arrowCursor, local_u8CurrentCursorPos, 0);
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	49 81       	ldd	r20, Y+1	; 0x01
    1172:	60 e6       	ldi	r22, 0x60	; 96
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 9c 07 	call	0xf38	; 0xf38 <LCD_createAndDisplayChar>

      // Calling the function to choose which operation to initiate
      SPSV2_chooseFun(local_u8CurrentCursorPos, local_u8CurrentScreenPos);
    117c:	6a 81       	ldd	r22, Y+2	; 0x02
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <SPSV2_chooseFun>
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	83 ec       	ldi	r24, 0xC3	; 195
    1188:	99 e0       	ldi	r25, 0x09	; 9
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	80 40       	sbci	r24, 0x00	; 0
    118e:	90 40       	sbci	r25, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <main+0x70>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <main+0x7a>
    1194:	00 00       	nop
    1196:	d8 cf       	rjmp	.-80     	; 0x1148 <main+0x2e>

00001198 <SPSV2_init>:
u8 arrowCursor2[] = {0b01000, 0b01100, 0b01110, 0b11111,
                     0b11111, 0b01110, 0b01100, 0b01000};

void SPSV2_init(void) {
   /*Initializing important pin directions */
   DIO_setPinDirection(MAIN_MENU_POT_PORT, MAIN_MENU_POT_PIN,
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_INPUT);  // Potentiometer Pin input ADC
   DIO_setPinDirection(VOLT_DIV_HIGH_PORT, VOLT_DIV_HIGH_PIN,
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_INPUT);  // High mode Voltage Divider pin
   DIO_setPinDirection(VOLT_DIV_LOW_PORT, VOLT_DIV_LOW_PIN, DIO_PIN_INPUT); // Low mode voltage Divider pin
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	63 e0       	ldi	r22, 0x03	; 3
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
   DIO_setPinDirection(
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	62 e0       	ldi	r22, 0x02	; 2
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
       ACS712_PORT, ACS712_PIN,
       DIO_PIN_OUTPUT);  // Current measurement module for Low/High outputs pin
   DIO_setPinDirection(PWM0_PORT, PWM0_PIN,
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	63 e0       	ldi	r22, 0x03	; 3
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_OUTPUT);               // PWM on Timer 0 pin
   SWITCH_init(ENTER_SWITCH_PORT, ENTER_SWITCH_PIN);  // Enter switch Pin
    11ca:	66 e0       	ldi	r22, 0x06	; 6
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	0e 94 14 08 	call	0x1028	; 0x1028 <SWITCH_init>
   SWITCH_init(HOME_SWITCH_PORT, HOME_SWITCH_PIN);    // Home switch Pin
    11d2:	67 e0       	ldi	r22, 0x07	; 7
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	0e 94 14 08 	call	0x1028	; 0x1028 <SWITCH_init>
   DIO_setPinDirection(
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	63 e0       	ldi	r22, 0x03	; 3
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
       RELAY_HIGH_OUT_PORT, RELAY_HIGH_OUT_PIN,
       DIO_PIN_OUTPUT);  // Relay control Pin for the High power output
   DIO_setPinDirection(
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
       RELAY_LOW_OUT_PORT, RELAY_LOW_OUT_PIN,
       DIO_PIN_OUTPUT);  // Relay control Pin for the low power output
   DIO_setPinDirection(LED_INDIC_HIGH_PORT, LED_INDIC_HIGH_PIN,
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_OUTPUT);  // LED indicator pin for High output
   DIO_setPinDirection(LED_INDIC_LOW_PORT, LED_INDIC_LOW_PIN,
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_OUTPUT);  // LED indicator pin for low output
   DIO_setPinDirection(CHARGE_MODE_SIG_PORT, CHARGE_MODE_SIG_PIN,
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	62 e0       	ldi	r22, 0x02	; 2
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_OUTPUT);  // Charging mode activate signal
   DIO_setPinDirection(LM35_PORT, LM35_PIN,
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	64 e0       	ldi	r22, 0x04	; 4
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_INPUT);  // Temperature sensor pin (LM35)
   DIO_setPinDirection(ACS712_MEASUREMENT_PORT, ACS712_MEASUREMENT_PIN,
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	62 e0       	ldi	r22, 0x02	; 2
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
                       DIO_PIN_OUTPUT);  // Current measurement relay signal
   DIO_setPinDirection(FAN_PORT, FAN_PIN, DIO_PIN_OUTPUT); // 12V Fan header pin
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	67 e0       	ldi	r22, 0x07	; 7
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
    122a:	08 95       	ret

0000122c <SPSV2_startProg>:
}

void SPSV2_startProg(void) {
   // Printing on the LCD details about the program
   LCD_displayString((u8 *)"SPS V2");
    122c:	80 e7       	ldi	r24, 0x70	; 112
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
   LCD_moveCursor(1, 0);
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
   LCD_displayString((u8 *)"Initializing .");
    123c:	87 e7       	ldi	r24, 0x77	; 119
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	89 e6       	ldi	r24, 0x69	; 105
    1248:	98 e1       	ldi	r25, 0x18	; 24
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	80 40       	sbci	r24, 0x00	; 0
    124e:	90 40       	sbci	r25, 0x00	; 0
    1250:	e1 f7       	brne	.-8      	; 0x124a <SPSV2_startProg+0x1e>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <SPSV2_startProg+0x28>
    1254:	00 00       	nop
   _delay_ms(500);
   LCD_displayString((u8 *)".");
    1256:	84 e8       	ldi	r24, 0x84	; 132
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    125e:	2f ef       	ldi	r18, 0xFF	; 255
    1260:	89 e6       	ldi	r24, 0x69	; 105
    1262:	98 e1       	ldi	r25, 0x18	; 24
    1264:	21 50       	subi	r18, 0x01	; 1
    1266:	80 40       	sbci	r24, 0x00	; 0
    1268:	90 40       	sbci	r25, 0x00	; 0
    126a:	e1 f7       	brne	.-8      	; 0x1264 <SPSV2_startProg+0x38>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <SPSV2_startProg+0x42>
    126e:	00 00       	nop
   _delay_ms(500);
   LCD_displayString((u8 *)".");
    1270:	84 e8       	ldi	r24, 0x84	; 132
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    1278:	08 95       	ret

0000127a <SPSV2_readTemp>:
}

void SPSV2_readTemp(void) {
   u8 local_u8Err = 0;
   f32 local_u16Temp = LM35_getVal(ADC_CHANNEL4);
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	0e 94 d6 07 	call	0xfac	; 0xfac <LM35_getVal>

   // if the temperature exceeds 35 degree Celsius, the program prompts the user
   // with a warning to turn off the SPSU
   if (local_u16Temp > 35.0) {
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4c e0       	ldi	r20, 0x0C	; 12
    1286:	52 e4       	ldi	r21, 0x42	; 66
    1288:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__gesf2>
    128c:	18 16       	cp	r1, r24
    128e:	0c f0       	brlt	.+2      	; 0x1292 <SPSV2_readTemp+0x18>
    1290:	57 c0       	rjmp	.+174    	; 0x1340 <SPSV2_readTemp+0xc6>
      LCD_clear();
    1292:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
      LCD_displayString((u8 *)"Warning");
    1296:	86 e8       	ldi	r24, 0x86	; 134
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    129e:	2f ef       	ldi	r18, 0xFF	; 255
    12a0:	84 e3       	ldi	r24, 0x34	; 52
    12a2:	9c e0       	ldi	r25, 0x0C	; 12
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	80 40       	sbci	r24, 0x00	; 0
    12a8:	90 40       	sbci	r25, 0x00	; 0
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <SPSV2_readTemp+0x2a>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <SPSV2_readTemp+0x34>
    12ae:	00 00       	nop
      _delay_ms(250);
      LCD_displayChar('!');
    12b0:	81 e2       	ldi	r24, 0x21	; 33
    12b2:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	84 e3       	ldi	r24, 0x34	; 52
    12ba:	9c e0       	ldi	r25, 0x0C	; 12
    12bc:	21 50       	subi	r18, 0x01	; 1
    12be:	80 40       	sbci	r24, 0x00	; 0
    12c0:	90 40       	sbci	r25, 0x00	; 0
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <SPSV2_readTemp+0x42>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <SPSV2_readTemp+0x4c>
    12c6:	00 00       	nop
      _delay_ms(250);
      LCD_displayChar('!');
    12c8:	81 e2       	ldi	r24, 0x21	; 33
    12ca:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	84 e3       	ldi	r24, 0x34	; 52
    12d2:	9c e0       	ldi	r25, 0x0C	; 12
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	80 40       	sbci	r24, 0x00	; 0
    12d8:	90 40       	sbci	r25, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <SPSV2_readTemp+0x5a>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <SPSV2_readTemp+0x64>
    12de:	00 00       	nop
      _delay_ms(250);
      LCD_clear();
    12e0:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
      LCD_displayString((u8 *)"Temperature is");
    12e4:	8e e8       	ldi	r24, 0x8E	; 142
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_moveCursor(1, 0);
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
      LCD_displayString((u8 *)"Too hot!");
    12f4:	8d e9       	ldi	r24, 0x9D	; 157
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	8e e9       	ldi	r24, 0x9E	; 158
    1300:	94 e2       	ldi	r25, 0x24	; 36
    1302:	21 50       	subi	r18, 0x01	; 1
    1304:	80 40       	sbci	r24, 0x00	; 0
    1306:	90 40       	sbci	r25, 0x00	; 0
    1308:	e1 f7       	brne	.-8      	; 0x1302 <SPSV2_readTemp+0x88>
    130a:	00 c0       	rjmp	.+0      	; 0x130c <SPSV2_readTemp+0x92>
    130c:	00 00       	nop
      _delay_ms(750);
      LCD_clear();
    130e:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
      LCD_displayString((u8 *)"Please turn off");
    1312:	86 ea       	ldi	r24, 0xA6	; 166
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_moveCursor(1, 0);
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
      LCD_displayString((u8 *)"PSU for now...");
    1322:	86 eb       	ldi	r24, 0xB6	; 182
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    132a:	2f ef       	ldi	r18, 0xFF	; 255
    132c:	87 ea       	ldi	r24, 0xA7	; 167
    132e:	91 e6       	ldi	r25, 0x61	; 97
    1330:	21 50       	subi	r18, 0x01	; 1
    1332:	80 40       	sbci	r24, 0x00	; 0
    1334:	90 40       	sbci	r25, 0x00	; 0
    1336:	e1 f7       	brne	.-8      	; 0x1330 <SPSV2_readTemp+0xb6>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <SPSV2_readTemp+0xc0>
    133a:	00 00       	nop
      _delay_ms(2000);
      LCD_clear();
    133c:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
    1340:	08 95       	ret

00001342 <SPSV2_updateScreenPosition>:
}

void SPSV2_updateScreenPosition(u16 copy_u16PotAdcVal, u8 *copy_u8CursorPos,
                                u8 *copy_u8ScreenPos) {
   // Conditions to change the variables based on the ADC value.
   if (copy_u16PotAdcVal >= 0 && copy_u16PotAdcVal < 170) {
    1342:	8a 3a       	cpi	r24, 0xAA	; 170
    1344:	91 05       	cpc	r25, r1
    1346:	28 f4       	brcc	.+10     	; 0x1352 <SPSV2_updateScreenPosition+0x10>
      *copy_u8ScreenPos = SCREEN_1;
    1348:	fa 01       	movw	r30, r20
    134a:	10 82       	st	Z, r1
      *copy_u8CursorPos =
    134c:	fb 01       	movw	r30, r22
    134e:	10 82       	st	Z, r1
    1350:	08 95       	ret
          0;  // High Voltage output using the buck converter circuit.
   } else if (copy_u16PotAdcVal >= 170 && copy_u16PotAdcVal < 340) {
    1352:	9c 01       	movw	r18, r24
    1354:	2a 5a       	subi	r18, 0xAA	; 170
    1356:	31 09       	sbc	r19, r1
    1358:	2a 3a       	cpi	r18, 0xAA	; 170
    135a:	31 05       	cpc	r19, r1
    135c:	30 f4       	brcc	.+12     	; 0x136a <SPSV2_updateScreenPosition+0x28>
      *copy_u8ScreenPos = SCREEN_1;
    135e:	fa 01       	movw	r30, r20
    1360:	10 82       	st	Z, r1
      *copy_u8CursorPos = 1;  // Second function of traditional Voltage output.
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	fb 01       	movw	r30, r22
    1366:	80 83       	st	Z, r24
    1368:	08 95       	ret
   } else if (copy_u16PotAdcVal >= 340 && copy_u16PotAdcVal < 510) {
    136a:	9c 01       	movw	r18, r24
    136c:	24 55       	subi	r18, 0x54	; 84
    136e:	31 40       	sbci	r19, 0x01	; 1
    1370:	2a 3a       	cpi	r18, 0xAA	; 170
    1372:	31 05       	cpc	r19, r1
    1374:	30 f4       	brcc	.+12     	; 0x1382 <SPSV2_updateScreenPosition+0x40>
      *copy_u8ScreenPos = SCREEN_2;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	fa 01       	movw	r30, r20
    137a:	80 83       	st	Z, r24
      *copy_u8CursorPos =
    137c:	fb 01       	movw	r30, r22
    137e:	10 82       	st	Z, r1
    1380:	08 95       	ret
          0;  // Third function to turn on lithium battery charging.
   } else if (copy_u16PotAdcVal >= 510 && copy_u16PotAdcVal < 680) {
    1382:	9c 01       	movw	r18, r24
    1384:	2e 5f       	subi	r18, 0xFE	; 254
    1386:	31 40       	sbci	r19, 0x01	; 1
    1388:	2a 3a       	cpi	r18, 0xAA	; 170
    138a:	31 05       	cpc	r19, r1
    138c:	30 f4       	brcc	.+12     	; 0x139a <SPSV2_updateScreenPosition+0x58>
      *copy_u8ScreenPos = SCREEN_2;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	fa 01       	movw	r30, r20
    1392:	80 83       	st	Z, r24
      *copy_u8CursorPos =
    1394:	fb 01       	movw	r30, r22
    1396:	80 83       	st	Z, r24
    1398:	08 95       	ret
          1;  // Fourth function to Measure input signal frequency and duty cycle.
   } else if (copy_u16PotAdcVal >= 680 && copy_u16PotAdcVal < 850) {
    139a:	9c 01       	movw	r18, r24
    139c:	28 5a       	subi	r18, 0xA8	; 168
    139e:	32 40       	sbci	r19, 0x02	; 2
    13a0:	2a 3a       	cpi	r18, 0xAA	; 170
    13a2:	31 05       	cpc	r19, r1
    13a4:	30 f4       	brcc	.+12     	; 0x13b2 <SPSV2_updateScreenPosition+0x70>
      *copy_u8ScreenPos = SCREEN_3;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	fa 01       	movw	r30, r20
    13aa:	80 83       	st	Z, r24
      *copy_u8CursorPos =
    13ac:	fb 01       	movw	r30, r22
    13ae:	10 82       	st	Z, r1
    13b0:	08 95       	ret
          0;  // Fifth function to Control Fan Speed.
   } else if (copy_u16PotAdcVal >= 850) {
    13b2:	82 35       	cpi	r24, 0x52	; 82
    13b4:	93 40       	sbci	r25, 0x03	; 3
    13b6:	30 f0       	brcs	.+12     	; 0x13c4 <SPSV2_updateScreenPosition+0x82>
   *copy_u8ScreenPos = SCREEN_3;
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	fa 01       	movw	r30, r20
    13bc:	80 83       	st	Z, r24
   *copy_u8CursorPos =
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	fb 01       	movw	r30, r22
    13c2:	80 83       	st	Z, r24
    13c4:	08 95       	ret

000013c6 <SPSV2_printMenu>:
   1;  // Sixth function to turn off the fan completely.
   }
}

void SPSV2_printMenu(u8 copy_u8CursorPos, u8 copy_u8ScreenPos) {
    13c6:	cf 93       	push	r28
    13c8:	c6 2f       	mov	r28, r22
   // Displaying the cursor on the screen
   LCD_clear();
    13ca:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

   switch (copy_u8ScreenPos) {
    13ce:	c1 30       	cpi	r28, 0x01	; 1
    13d0:	89 f0       	breq	.+34     	; 0x13f4 <SPSV2_printMenu+0x2e>
    13d2:	18 f0       	brcs	.+6      	; 0x13da <SPSV2_printMenu+0x14>
    13d4:	c2 30       	cpi	r28, 0x02	; 2
    13d6:	d9 f0       	breq	.+54     	; 0x140e <SPSV2_printMenu+0x48>
    13d8:	27 c0       	rjmp	.+78     	; 0x1428 <SPSV2_printMenu+0x62>
      case SCREEN_1:
         LCD_displayString((u8 *)" High Power mode");
    13da:	85 ec       	ldi	r24, 0xC5	; 197
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_moveCursor(1, 0);
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
         LCD_displayString((u8 *)" Low Power mode");
    13ea:	86 ed       	ldi	r24, 0xD6	; 214
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         break;
    13f2:	24 c0       	rjmp	.+72     	; 0x143c <SPSV2_printMenu+0x76>
      case SCREEN_2:
         LCD_displayString((u8 *)" Charging mode");
    13f4:	86 ee       	ldi	r24, 0xE6	; 230
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_moveCursor(1, 0);
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
         LCD_displayString((u8 *)" Frequency Count");
    1404:	85 ef       	ldi	r24, 0xF5	; 245
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         break;
    140c:	17 c0       	rjmp	.+46     	; 0x143c <SPSV2_printMenu+0x76>
      case SCREEN_3:
         LCD_displayString((u8 *)" Fan Speed");
    140e:	86 e0       	ldi	r24, 0x06	; 6
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
		 LCD_moveCursor(1, 0);
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
		 LCD_displayString(" Turn Off Fan");
    141e:	81 e1       	ldi	r24, 0x11	; 17
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         break;
    1426:	0a c0       	rjmp	.+20     	; 0x143c <SPSV2_printMenu+0x76>
      default:  // Displaying error code 0, relating to the menu function not
                // working correctly.
         LCD_displayString((u8 *)"Error Code:");
    1428:	8f e1       	ldi	r24, 0x1F	; 31
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_displayNumber(ERR_MENU, 0);
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	cb 01       	movw	r24, r22
    1438:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
         break;
   }
}
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <SPSV2_updateCursorPrescaler>:

void SPSV2_updateCursorPrescaler(u16 copy_u16PotAdcVal,
                                 u8 *copy_u8CursorPosFreq,
                                 u8 *copy_u8ScreenPosFreq) {
   // Conditions to change the variables based on the ADC value.
   if (copy_u16PotAdcVal < 204) {
    1440:	8c 3c       	cpi	r24, 0xCC	; 204
    1442:	91 05       	cpc	r25, r1
    1444:	28 f4       	brcc	.+10     	; 0x1450 <SPSV2_updateCursorPrescaler+0x10>
      *copy_u8ScreenPosFreq = SCREEN_1;
    1446:	fa 01       	movw	r30, r20
    1448:	10 82       	st	Z, r1
      *copy_u8CursorPosFreq = 0;  // Prescaler 1
    144a:	fb 01       	movw	r30, r22
    144c:	10 82       	st	Z, r1
    144e:	08 95       	ret
   } else if (copy_u16PotAdcVal < 408) {
    1450:	88 39       	cpi	r24, 0x98	; 152
    1452:	f1 e0       	ldi	r31, 0x01	; 1
    1454:	9f 07       	cpc	r25, r31
    1456:	30 f4       	brcc	.+12     	; 0x1464 <SPSV2_updateCursorPrescaler+0x24>
      *copy_u8ScreenPosFreq = SCREEN_1;
    1458:	fa 01       	movw	r30, r20
    145a:	10 82       	st	Z, r1
      *copy_u8CursorPosFreq = 2;  // Prescaler 8
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	fb 01       	movw	r30, r22
    1460:	80 83       	st	Z, r24
    1462:	08 95       	ret
   } else if (copy_u16PotAdcVal < 612) {
    1464:	84 36       	cpi	r24, 0x64	; 100
    1466:	f2 e0       	ldi	r31, 0x02	; 2
    1468:	9f 07       	cpc	r25, r31
    146a:	30 f4       	brcc	.+12     	; 0x1478 <SPSV2_updateCursorPrescaler+0x38>
      *copy_u8ScreenPosFreq = SCREEN_1;
    146c:	fa 01       	movw	r30, r20
    146e:	10 82       	st	Z, r1
      *copy_u8CursorPosFreq = 4;  // Prescaler 64
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	fb 01       	movw	r30, r22
    1474:	80 83       	st	Z, r24
    1476:	08 95       	ret
   } else if (copy_u16PotAdcVal < 816) {
    1478:	80 33       	cpi	r24, 0x30	; 48
    147a:	93 40       	sbci	r25, 0x03	; 3
    147c:	30 f4       	brcc	.+12     	; 0x148a <SPSV2_updateCursorPrescaler+0x4a>
      *copy_u8ScreenPosFreq = SCREEN_1;
    147e:	fa 01       	movw	r30, r20
    1480:	10 82       	st	Z, r1
      *copy_u8CursorPosFreq = 7;  // Prescaler 256
    1482:	87 e0       	ldi	r24, 0x07	; 7
    1484:	fb 01       	movw	r30, r22
    1486:	80 83       	st	Z, r24
    1488:	08 95       	ret
   } else {
      *copy_u8ScreenPosFreq = SCREEN_1;
    148a:	fa 01       	movw	r30, r20
    148c:	10 82       	st	Z, r1
      *copy_u8CursorPosFreq = 11;  // Prescaler 1024
    148e:	8b e0       	ldi	r24, 0x0B	; 11
    1490:	fb 01       	movw	r30, r22
    1492:	80 83       	st	Z, r24
    1494:	08 95       	ret

00001496 <SPSV2_printMenuPrescaler>:
   }
}

void SPSV2_printMenuPrescaler(u8 copy_u8CursorPosFreq,
                              u8 copy_u8ScreenPosFreq) {
    1496:	cf 93       	push	r28
    1498:	c6 2f       	mov	r28, r22
   // Displaying the cursor on the screen
   LCD_clear();
    149a:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

   switch (copy_u8ScreenPosFreq) {
    149e:	c1 11       	cpse	r28, r1
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <SPSV2_printMenuPrescaler+0x26>
      case SCREEN_1:
         LCD_displayString((u8 *)"Select Prescaler:");
    14a2:	8b e2       	ldi	r24, 0x2B	; 43
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_moveCursor(1, 0);
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
         LCD_displayString((u8 *)" 1 8 64 256 1024");
    14b2:	8d e3       	ldi	r24, 0x3D	; 61
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         break;
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <SPSV2_printMenuPrescaler+0x3c>
      default:  // Displaying error code 2, relating to the selection of
                // Prescaler not functioning correctly.
         LCD_displayString((u8 *)"Error Code: ");
    14bc:	8e e4       	ldi	r24, 0x4E	; 78
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_displayNumber(ERR_MENU_FREQ, 0);
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e4       	ldi	r25, 0x40	; 64
    14ce:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
         break;
   }
}
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <SPSV2_choosePrescaler>:

void SPSV2_choosePrescaler(u8 copy_u8CursorPos, u8 copy_u8ScreenPos,
                           u8 *copy_u8PrescalerVal) {
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	c8 2f       	mov	r28, r24
    14e0:	d6 2f       	mov	r29, r22
    14e2:	8a 01       	movw	r16, r20
   u8 local_u8EnterSwitch = SWITCH_getState(ENTER_SWITCH_PORT, ENTER_SWITCH_PIN,
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	66 e0       	ldi	r22, 0x06	; 6
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
                                            SWITCH_INPUT_PULLDOWN);

   if (local_u8EnterSwitch) {
    14ee:	88 23       	and	r24, r24
    14f0:	c9 f1       	breq	.+114    	; 0x1564 <SPSV2_choosePrescaler+0x8e>
      switch (copy_u8ScreenPos) {
    14f2:	d1 11       	cpse	r29, r1
    14f4:	2c c0       	rjmp	.+88     	; 0x154e <SPSV2_choosePrescaler+0x78>
         case SCREEN_1:
            switch (copy_u8CursorPos) {
    14f6:	c4 30       	cpi	r28, 0x04	; 4
    14f8:	91 f0       	breq	.+36     	; 0x151e <SPSV2_choosePrescaler+0x48>
    14fa:	28 f4       	brcc	.+10     	; 0x1506 <SPSV2_choosePrescaler+0x30>
    14fc:	cc 23       	and	r28, r28
    14fe:	41 f0       	breq	.+16     	; 0x1510 <SPSV2_choosePrescaler+0x3a>
    1500:	c2 30       	cpi	r28, 0x02	; 2
    1502:	49 f0       	breq	.+18     	; 0x1516 <SPSV2_choosePrescaler+0x40>
    1504:	18 c0       	rjmp	.+48     	; 0x1536 <SPSV2_choosePrescaler+0x60>
    1506:	c7 30       	cpi	r28, 0x07	; 7
    1508:	71 f0       	breq	.+28     	; 0x1526 <SPSV2_choosePrescaler+0x50>
    150a:	cb 30       	cpi	r28, 0x0B	; 11
    150c:	81 f0       	breq	.+32     	; 0x152e <SPSV2_choosePrescaler+0x58>
    150e:	13 c0       	rjmp	.+38     	; 0x1536 <SPSV2_choosePrescaler+0x60>
               case 0:
                  *copy_u8PrescalerVal = TMR1_PRESCALER_1;
    1510:	f8 01       	movw	r30, r16
    1512:	10 82       	st	Z, r1
                  break;
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <SPSV2_choosePrescaler+0x8e>
               case 2:
                  *copy_u8PrescalerVal = TMR1_PRESCALER_8;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	f8 01       	movw	r30, r16
    151a:	80 83       	st	Z, r24
                  break;
    151c:	23 c0       	rjmp	.+70     	; 0x1564 <SPSV2_choosePrescaler+0x8e>
               case 4:
                  *copy_u8PrescalerVal = TMR1_PRESCALER_64;
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	f8 01       	movw	r30, r16
    1522:	80 83       	st	Z, r24
                  break;
    1524:	1f c0       	rjmp	.+62     	; 0x1564 <SPSV2_choosePrescaler+0x8e>
               case 7:
                  *copy_u8PrescalerVal = TMR1_PRESCALER_256;
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	f8 01       	movw	r30, r16
    152a:	80 83       	st	Z, r24
                  break;
    152c:	1b c0       	rjmp	.+54     	; 0x1564 <SPSV2_choosePrescaler+0x8e>
               case 11:
                  *copy_u8PrescalerVal = TMR1_PRESCALER_1024;
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24
                  break;
    1534:	17 c0       	rjmp	.+46     	; 0x1564 <SPSV2_choosePrescaler+0x8e>
               default:
                  // Displaying error code 3, relating to selection of Prescaler
                  // malfunctioned.
                  LCD_displayString((u8 *)"Error Code:");
    1536:	8f e1       	ldi	r24, 0x1F	; 31
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
                  LCD_displayNumber(ERR_SELECT_PRESCALER, 0);
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	80 e4       	ldi	r24, 0x40	; 64
    1546:	90 e4       	ldi	r25, 0x40	; 64
    1548:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
                  break;
    154c:	0b c0       	rjmp	.+22     	; 0x1564 <SPSV2_choosePrescaler+0x8e>

            break;
         default:
            // Displaying error code 3, relating to selection of Prescaler
            // malfunctioned.
            LCD_displayString((u8 *)"Error Code:");
    154e:	8f e1       	ldi	r24, 0x1F	; 31
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
            LCD_displayNumber(ERR_SELECT_PRESCALER, 0);
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 e4       	ldi	r24, 0x40	; 64
    155e:	90 e4       	ldi	r25, 0x40	; 64
    1560:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
            break;
      }
   }
}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <SPSV2_mapAdcToPwm>:
}

u8 SPSV2_mapAdcToPwm(u16 copy_u16AdcValue) {
   // Example piecewise function (you may need to adjust these values based on
   // your observations)
   if (copy_u16AdcValue < 512) {
    156e:	81 15       	cp	r24, r1
    1570:	22 e0       	ldi	r18, 0x02	; 2
    1572:	92 07       	cpc	r25, r18
    1574:	68 f4       	brcc	.+26     	; 0x1590 <SPSV2_mapAdcToPwm+0x22>
      return (u8)((copy_u16AdcValue * 50) / 511);  // Scale 0-511 to 0-50
    1576:	42 e3       	ldi	r20, 0x32	; 50
    1578:	48 9f       	mul	r20, r24
    157a:	90 01       	movw	r18, r0
    157c:	49 9f       	mul	r20, r25
    157e:	30 0d       	add	r19, r0
    1580:	11 24       	eor	r1, r1
    1582:	c9 01       	movw	r24, r18
    1584:	6f ef       	ldi	r22, 0xFF	; 255
    1586:	71 e0       	ldi	r23, 0x01	; 1
    1588:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodhi4>
    158c:	86 2f       	mov	r24, r22
    158e:	08 95       	ret
   } else {
      return (u8)(50 + ((copy_u16AdcValue - 512) * 50) /
    1590:	42 e3       	ldi	r20, 0x32	; 50
    1592:	48 9f       	mul	r20, r24
    1594:	90 01       	movw	r18, r0
    1596:	49 9f       	mul	r20, r25
    1598:	30 0d       	add	r19, r0
    159a:	11 24       	eor	r1, r1
    159c:	c9 01       	movw	r24, r18
    159e:	94 56       	subi	r25, 0x64	; 100
    15a0:	6f ef       	ldi	r22, 0xFF	; 255
    15a2:	71 e0       	ldi	r23, 0x01	; 1
    15a4:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodhi4>
    15a8:	82 e3       	ldi	r24, 0x32	; 50
    15aa:	86 0f       	add	r24, r22
                           511);  // Scale 512-1023 to 50-100
   }
}
    15ac:	08 95       	ret

000015ae <SPSV2_convertADCToVoltage>:

f32 SPSV2_convertADCToVoltage(u16 copy_u16AdcValue) {
   const f32 ADC_REF_VOLTAGE = 5.0;

   // Read ADC value from channel 0
   u16 adcValue = ADC_getValue(ADC_CHANNEL0);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>

   // Calculate the output voltage from ADC value
   f32 copy_f32Vout = (adcValue / 1023.0) * ADC_REF_VOLTAGE;
    15b4:	bc 01       	movw	r22, r24
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 ec       	ldi	r19, 0xC0	; 192
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	54 e4       	ldi	r21, 0x44	; 68
    15c6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 ea       	ldi	r20, 0xA0	; 160
    15d0:	50 e4       	ldi	r21, 0x40	; 64
    15d2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>

   // Calculate the input voltage using the voltage divider formula
   f32 copy_f32Vin = copy_f32Vout * ((R1 + R2) / (f32)R2);
    15d6:	2a e9       	ldi	r18, 0x9A	; 154
    15d8:	39 e9       	ldi	r19, 0x99	; 153
    15da:	49 ef       	ldi	r20, 0xF9	; 249
    15dc:	50 e4       	ldi	r21, 0x40	; 64
    15de:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>

   return copy_f32Vin;
}
    15e2:	08 95       	ret

000015e4 <SPSV2_convertADCToVoltage_LOWMODE>:

f32 SPSV2_convertADCToVoltage_LOWMODE(void) {
	const f32 ADC_REF_VOLTAGE = 5.0;

	// Read ADC value from channel 0
	u16 adcValue = ADC_getValue(ADC_CHANNEL3);
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>

	// Calculate the output voltage from ADC value
	f32 copy_f32Vout = (adcValue / 1023.0) * ADC_REF_VOLTAGE;
    15ea:	bc 01       	movw	r22, r24
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 ec       	ldi	r19, 0xC0	; 192
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	54 e4       	ldi	r21, 0x44	; 68
    15fc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 ea       	ldi	r20, 0xA0	; 160
    1606:	50 e4       	ldi	r21, 0x40	; 64
    1608:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>

	// Calculate the input voltage using the voltage divider formula
	f32 copy_f32Vin = copy_f32Vout * ((R1L + R2L) / (f32)R2L);
    160c:	2a e9       	ldi	r18, 0x9A	; 154
    160e:	39 e9       	ldi	r19, 0x99	; 153
    1610:	49 ef       	ldi	r20, 0xF9	; 249
    1612:	50 e4       	ldi	r21, 0x40	; 64
    1614:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>

	return copy_f32Vin;
}
    1618:	08 95       	ret

0000161a <SPSV2_readCurrent>:
       0.100;  // Sensitivity for ACS712-20B: 100mV/A
   const u16 ZERO_CURRENT_OFFSET =
       512;  // ADC value at zero current (approx. 2.5V for 5V supply)

   // Read ADC value from channel 2
   u16 adcValue = ADC_getValue(ADC_CHANNEL2);
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>

   // Convert ADC value to voltage
   f32 voltage = (adcValue / 1023.0) * ADC_REF_VOLTAGE;
    1620:	bc 01       	movw	r22, r24
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 ec       	ldi	r19, 0xC0	; 192
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	54 e4       	ldi	r21, 0x44	; 68
    1632:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 ea       	ldi	r20, 0xA0	; 160
    163c:	50 e4       	ldi	r21, 0x40	; 64
    163e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__mulsf3>

   // Calculate the current
   f32 current = (voltage - (ADC_REF_VOLTAGE / 2)) / CURRENT_SENSITIVITY;
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	50 e4       	ldi	r21, 0x40	; 64
    164a:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__subsf3>
    164e:	2d ec       	ldi	r18, 0xCD	; 205
    1650:	3c ec       	ldi	r19, 0xCC	; 204
    1652:	4c ec       	ldi	r20, 0xCC	; 204
    1654:	5d e3       	ldi	r21, 0x3D	; 61
    1656:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>

   return current;
}
    165a:	08 95       	ret

0000165c <SPSV2_highPowerOut>:

void SPSV2_highPowerOut(void) {
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
   // Clearing the screen before displaying the contents of the function and
   // enabling the Relay
   LCD_clear();
    1672:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   DIO_setPinVal(RELAY_HIGH_OUT_PORT, RELAY_HIGH_OUT_PIN, DIO_PIN_OUTPUT_HIGH);
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	63 e0       	ldi	r22, 0x03	; 3
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   // Turning on LED indicator
   DIO_setPinVal(LED_INDIC_HIGH_PORT, LED_INDIC_HIGH_PIN, DIO_PIN_OUTPUT_HIGH);
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   // Current sensor read HIGH mode output
   DIO_setPinVal(ACS712_MEASUREMENT_PORT, ACS712_MEASUREMENT_PIN,
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
                 DIO_PIN_OUTPUT_LOW);

   while (1) {
      // Reading the home switch state
      u8 local_u8HomeSwitch = SWITCH_getState(HOME_SWITCH_PORT, HOME_SWITCH_PIN,
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	67 e0       	ldi	r22, 0x07	; 7
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
    169e:	18 2f       	mov	r17, r24
                                              SWITCH_INPUT_PULLDOWN);
      // Reading the ADC Value
      u16 local_u16AdcValue = ADC_getValue(ADC_CHANNEL1);
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>
    16a6:	ec 01       	movw	r28, r24
      f32 local_f32VoltVal = SPSV2_convertADCToVoltage(local_u16AdcValue);
    16a8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <SPSV2_convertADCToVoltage>
    16ac:	4b 01       	movw	r8, r22
    16ae:	5c 01       	movw	r10, r24
      f32 local_f32CurrentVal = SPSV2_readCurrent();
    16b0:	0e 94 0d 0b 	call	0x161a	; 0x161a <SPSV2_readCurrent>
    16b4:	6b 01       	movw	r12, r22
    16b6:	7c 01       	movw	r14, r24

      // Map the ADC value to PWM duty cycle using a piecewise function
      u8 pwmDutyCycle = SPSV2_mapAdcToPwm(local_u16AdcValue);
    16b8:	ce 01       	movw	r24, r28
    16ba:	0e 94 b7 0a 	call	0x156e	; 0x156e <SPSV2_mapAdcToPwm>

      // Generating a variable PWM signal based off the values of the main
      // potentiometer
      TMR0_generatePWM(pwmDutyCycle, TMR0_PWM_NON_INVERT, TMR0_PRESCALER_64);
    16be:	42 e0       	ldi	r20, 0x02	; 2
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <TMR0_generatePWM>

      // Displaying the voltage and current values being read
      LCD_displayString((u8 *)"Voltage: ");
    16c6:	8b e5       	ldi	r24, 0x5B	; 91
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_displayNumber(local_f32VoltVal, 2);
    16ce:	42 e0       	ldi	r20, 0x02	; 2
    16d0:	c5 01       	movw	r24, r10
    16d2:	b4 01       	movw	r22, r8
    16d4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
      LCD_displayChar('V');
    16d8:	86 e5       	ldi	r24, 0x56	; 86
    16da:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
      LCD_moveCursor(1, 0);
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
      LCD_displayString((u8 *)"Current: ");
    16e6:	85 e6       	ldi	r24, 0x65	; 101
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_displayNumber(local_f32CurrentVal, 2);
    16ee:	42 e0       	ldi	r20, 0x02	; 2
    16f0:	c7 01       	movw	r24, r14
    16f2:	b6 01       	movw	r22, r12
    16f4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	86 e1       	ldi	r24, 0x16	; 22
    16fc:	91 e1       	ldi	r25, 0x11	; 17
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	80 40       	sbci	r24, 0x00	; 0
    1702:	90 40       	sbci	r25, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <SPSV2_highPowerOut+0xa2>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <SPSV2_highPowerOut+0xac>
    1708:	00 00       	nop
      _delay_ms(350);
	  LCD_clear();
    170a:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

      if (local_u8HomeSwitch) {
    170e:	11 23       	and	r17, r17
    1710:	09 f2       	breq	.-126    	; 0x1694 <SPSV2_highPowerOut+0x38>
         break;
      }
   }

   // Disabling TMR0 PWM output and clearing the LCD screen
   DIO_setPinVal(RELAY_HIGH_OUT_PORT, RELAY_HIGH_OUT_PIN, DIO_PIN_OUTPUT_LOW);
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	63 e0       	ldi	r22, 0x03	; 3
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   DIO_setPinVal(LED_INDIC_HIGH_PORT, LED_INDIC_HIGH_PIN, DIO_PIN_OUTPUT_LOW);
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   DIO_setPinVal(ACS712_MEASUREMENT_PORT, ACS712_MEASUREMENT_PIN,
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	62 e0       	ldi	r22, 0x02	; 2
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
                 DIO_PIN_OUTPUT_LOW);
   GIE_disable();
    1730:	0e 94 e7 01 	call	0x3ce	; 0x3ce <GIE_disable>
   TMR0_stop();
    1734:	0e 94 a4 02 	call	0x548	; 0x548 <TMR0_stop>
   LCD_clear();
    1738:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
}
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	08 95       	ret

00001754 <SPSV2_lowPowerOut>:

void SPSV2_lowPowerOut(void) {
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	cf 93       	push	r28
   // Clearing the screen before displaying the contents of the function and
   // enabling the Relay
   LCD_clear();
    1766:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   DIO_setPinVal(RELAY_LOW_OUT_PORT, RELAY_LOW_OUT_PIN, DIO_PIN_OUTPUT_HIGH);
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	64 e0       	ldi	r22, 0x04	; 4
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   // Turning on LED
   DIO_setPinVal(LED_INDIC_LOW_PORT, LED_INDIC_LOW_PIN, DIO_PIN_OUTPUT_HIGH);
    1774:	41 e0       	ldi	r20, 0x01	; 1
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   // Current sensor read LOW mode
   DIO_setPinVal(ACS712_MEASUREMENT_PORT, ACS712_MEASUREMENT_PIN,
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	62 e0       	ldi	r22, 0x02	; 2
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
                 DIO_PIN_OUTPUT_HIGH);

   // Printing information for the user on the current mode
   LCD_displayString((u8 *)"This mode is ");
    1788:	8f e6       	ldi	r24, 0x6F	; 111
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
   LCD_moveCursor(1, 0);
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
   LCD_displayString((u8 *)"Controlled by..");
    1798:	8d e7       	ldi	r24, 0x7D	; 125
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    17a0:	2f ef       	ldi	r18, 0xFF	; 255
    17a2:	86 e1       	ldi	r24, 0x16	; 22
    17a4:	91 e1       	ldi	r25, 0x11	; 17
    17a6:	21 50       	subi	r18, 0x01	; 1
    17a8:	80 40       	sbci	r24, 0x00	; 0
    17aa:	90 40       	sbci	r25, 0x00	; 0
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <SPSV2_lowPowerOut+0x52>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <SPSV2_lowPowerOut+0x5c>
    17b0:	00 00       	nop
   _delay_ms(350);
   LCD_clear();
    17b2:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   LCD_displayString((u8 *)"Potentiometers");
    17b6:	8d e8       	ldi	r24, 0x8D	; 141
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
   LCD_moveCursor(1, 0);
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
   LCD_displayString((u8 *)"By the output");
    17c6:	8c e9       	ldi	r24, 0x9C	; 156
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    17ce:	2f ef       	ldi	r18, 0xFF	; 255
    17d0:	86 e1       	ldi	r24, 0x16	; 22
    17d2:	91 e1       	ldi	r25, 0x11	; 17
    17d4:	21 50       	subi	r18, 0x01	; 1
    17d6:	80 40       	sbci	r24, 0x00	; 0
    17d8:	90 40       	sbci	r25, 0x00	; 0
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <SPSV2_lowPowerOut+0x80>
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <SPSV2_lowPowerOut+0x8a>
    17de:	00 00       	nop
   _delay_ms(350);
   LCD_clear();
    17e0:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

   while (1) {
      // Reading the home switch state
      u8 local_u8HomeSwitch = SWITCH_getState(HOME_SWITCH_PORT, HOME_SWITCH_PIN,
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	67 e0       	ldi	r22, 0x07	; 7
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
    17ee:	c8 2f       	mov	r28, r24
                                              SWITCH_INPUT_PULLDOWN);
      f32 local_f32VoltVal = SPSV2_convertADCToVoltage_LOWMODE();
    17f0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPSV2_convertADCToVoltage_LOWMODE>
    17f4:	4b 01       	movw	r8, r22
    17f6:	5c 01       	movw	r10, r24
      f32 local_f32CurrentVal = SPSV2_readCurrent();
    17f8:	0e 94 0d 0b 	call	0x161a	; 0x161a <SPSV2_readCurrent>
    17fc:	6b 01       	movw	r12, r22
    17fe:	7c 01       	movw	r14, r24

      // Display Voltage
      LCD_displayString((u8 *)"Voltage: ");
    1800:	8b e5       	ldi	r24, 0x5B	; 91
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_displayNumber(local_f32VoltVal, 2);
    1808:	42 e0       	ldi	r20, 0x02	; 2
    180a:	c5 01       	movw	r24, r10
    180c:	b4 01       	movw	r22, r8
    180e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
      LCD_moveCursor(1, 0);
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
      LCD_displayString((u8 *)"Current: ");
    181a:	85 e6       	ldi	r24, 0x65	; 101
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_displayNumber(local_f32CurrentVal, 2);
    1822:	42 e0       	ldi	r20, 0x02	; 2
    1824:	c7 01       	movw	r24, r14
    1826:	b6 01       	movw	r22, r12
    1828:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
    182c:	2f ef       	ldi	r18, 0xFF	; 255
    182e:	84 e3       	ldi	r24, 0x34	; 52
    1830:	9c e0       	ldi	r25, 0x0C	; 12
    1832:	21 50       	subi	r18, 0x01	; 1
    1834:	80 40       	sbci	r24, 0x00	; 0
    1836:	90 40       	sbci	r25, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <SPSV2_lowPowerOut+0xde>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <SPSV2_lowPowerOut+0xe8>
    183c:	00 00       	nop
      _delay_ms(250);
      LCD_clear();
    183e:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

      if (local_u8HomeSwitch) {
    1842:	cc 23       	and	r28, r28
    1844:	79 f2       	breq	.-98     	; 0x17e4 <SPSV2_lowPowerOut+0x90>
         break;
      }
   }

   // Disabling TMR0 PWM output and clearing the LCD screen
   DIO_setPinVal(RELAY_LOW_OUT_PORT, RELAY_LOW_OUT_PIN, DIO_PIN_OUTPUT_LOW);
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	64 e0       	ldi	r22, 0x04	; 4
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   DIO_setPinVal(LED_INDIC_LOW_PORT, LED_INDIC_LOW_PIN, DIO_PIN_OUTPUT_LOW);
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
   DIO_setPinVal(ACS712_MEASUREMENT_PORT, ACS712_MEASUREMENT_PIN,
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
                 DIO_PIN_OUTPUT_LOW);
   LCD_clear();
    1864:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
}
    1868:	cf 91       	pop	r28
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	9f 90       	pop	r9
    1878:	8f 90       	pop	r8
    187a:	08 95       	ret

0000187c <SPSV2_chargingMode>:

void SPSV2_chargingMode(void) {
    187c:	cf 93       	push	r28
   // Sending the activate signal
   LCD_clear();
    187e:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   DIO_setPinVal(CHARGE_MODE_SIG_PORT, CHARGE_MODE_SIG_PIN,
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
                 DIO_PIN_OUTPUT_HIGH);

   // Printing information for the user on the current mode
   LCD_displayString((u8 *)"Please wait");
    188c:	8a ea       	ldi	r24, 0xAA	; 170
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
   LCD_moveCursor(1, 0);
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
   LCD_displayString((u8 *)"while batteries");
    189c:	86 eb       	ldi	r24, 0xB6	; 182
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    18a4:	2f ef       	ldi	r18, 0xFF	; 255
    18a6:	8e e9       	ldi	r24, 0x9E	; 158
    18a8:	94 e2       	ldi	r25, 0x24	; 36
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	80 40       	sbci	r24, 0x00	; 0
    18ae:	90 40       	sbci	r25, 0x00	; 0
    18b0:	e1 f7       	brne	.-8      	; 0x18aa <SPSV2_chargingMode+0x2e>
    18b2:	00 c0       	rjmp	.+0      	; 0x18b4 <SPSV2_chargingMode+0x38>
    18b4:	00 00       	nop
   _delay_ms(750);
   LCD_clear();
    18b6:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   LCD_displayString((u8 *)"Finish");
    18ba:	86 ec       	ldi	r24, 0xC6	; 198
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
   LCD_moveCursor(1, 0);
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
   LCD_displayString((u8 *)"Charging!!!");
    18ca:	8d ec       	ldi	r24, 0xCD	; 205
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
    18d2:	2f ef       	ldi	r18, 0xFF	; 255
    18d4:	8e e9       	ldi	r24, 0x9E	; 158
    18d6:	94 e2       	ldi	r25, 0x24	; 36
    18d8:	21 50       	subi	r18, 0x01	; 1
    18da:	80 40       	sbci	r24, 0x00	; 0
    18dc:	90 40       	sbci	r25, 0x00	; 0
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <SPSV2_chargingMode+0x5c>
    18e0:	00 c0       	rjmp	.+0      	; 0x18e2 <SPSV2_chargingMode+0x66>
    18e2:	00 00       	nop
   _delay_ms(750);
   LCD_clear();
    18e4:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

   while (1) {
      // Reading the home switch state
      u8 local_u8HomeSwitch = SWITCH_getState(HOME_SWITCH_PORT, HOME_SWITCH_PIN,
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	67 e0       	ldi	r22, 0x07	; 7
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
    18f2:	c8 2f       	mov	r28, r24
                                              SWITCH_INPUT_PULLDOWN);
      u16 local_u16AdcValue = ADC_getValue(ADC_CHANNEL3);
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>

      // Printing a loading screen to the user on the LCD
      LCD_displayString((u8 *)"Charging");
    18fa:	89 ed       	ldi	r24, 0xD9	; 217
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
      LCD_displayChar('.');
    1902:	8e e2       	ldi	r24, 0x2E	; 46
    1904:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1908:	2f ef       	ldi	r18, 0xFF	; 255
    190a:	84 e3       	ldi	r24, 0x34	; 52
    190c:	9c e0       	ldi	r25, 0x0C	; 12
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	80 40       	sbci	r24, 0x00	; 0
    1912:	90 40       	sbci	r25, 0x00	; 0
    1914:	e1 f7       	brne	.-8      	; 0x190e <SPSV2_chargingMode+0x92>
    1916:	00 c0       	rjmp	.+0      	; 0x1918 <SPSV2_chargingMode+0x9c>
    1918:	00 00       	nop
      _delay_ms(250);
      LCD_displayChar('.');
    191a:	8e e2       	ldi	r24, 0x2E	; 46
    191c:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1920:	2f ef       	ldi	r18, 0xFF	; 255
    1922:	84 e3       	ldi	r24, 0x34	; 52
    1924:	9c e0       	ldi	r25, 0x0C	; 12
    1926:	21 50       	subi	r18, 0x01	; 1
    1928:	80 40       	sbci	r24, 0x00	; 0
    192a:	90 40       	sbci	r25, 0x00	; 0
    192c:	e1 f7       	brne	.-8      	; 0x1926 <SPSV2_chargingMode+0xaa>
    192e:	00 c0       	rjmp	.+0      	; 0x1930 <SPSV2_chargingMode+0xb4>
    1930:	00 00       	nop
      _delay_ms(250);
      LCD_displayChar('.');
    1932:	8e e2       	ldi	r24, 0x2E	; 46
    1934:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1938:	2f ef       	ldi	r18, 0xFF	; 255
    193a:	84 e3       	ldi	r24, 0x34	; 52
    193c:	9c e0       	ldi	r25, 0x0C	; 12
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	80 40       	sbci	r24, 0x00	; 0
    1942:	90 40       	sbci	r25, 0x00	; 0
    1944:	e1 f7       	brne	.-8      	; 0x193e <SPSV2_chargingMode+0xc2>
    1946:	00 c0       	rjmp	.+0      	; 0x1948 <SPSV2_chargingMode+0xcc>
    1948:	00 00       	nop
      _delay_ms(250);
      LCD_displayChar('!');
    194a:	81 e2       	ldi	r24, 0x21	; 33
    194c:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1950:	2f ef       	ldi	r18, 0xFF	; 255
    1952:	84 e3       	ldi	r24, 0x34	; 52
    1954:	9c e0       	ldi	r25, 0x0C	; 12
    1956:	21 50       	subi	r18, 0x01	; 1
    1958:	80 40       	sbci	r24, 0x00	; 0
    195a:	90 40       	sbci	r25, 0x00	; 0
    195c:	e1 f7       	brne	.-8      	; 0x1956 <SPSV2_chargingMode+0xda>
    195e:	00 c0       	rjmp	.+0      	; 0x1960 <SPSV2_chargingMode+0xe4>
    1960:	00 00       	nop
      _delay_ms(250);
      LCD_clear();
    1962:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>

      if (local_u8HomeSwitch) {
    1966:	cc 23       	and	r28, r28
    1968:	09 f4       	brne	.+2      	; 0x196c <SPSV2_chargingMode+0xf0>
    196a:	be cf       	rjmp	.-132    	; 0x18e8 <SPSV2_chargingMode+0x6c>
         break;
      }
   }

   // Turning off the signal
   LCD_clear();
    196c:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   DIO_setPinVal(CHARGE_MODE_SIG_PORT, CHARGE_MODE_SIG_PIN, DIO_PIN_OUTPUT_LOW);
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_setPinVal>
}
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <SPSV2_freqCounterIcp>:

void SPSV2_freqCounterIcp(void) {
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	00 d0       	rcall	.+0      	; 0x1990 <SPSV2_freqCounterIcp+0x12>
    1990:	1f 92       	push	r1
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
   // Sending the activate signal and Activating the Global interrupts
   LCD_clear();
    1996:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   DIO_setPinDirection(ICP_PORT, ICP_PIN, DIO_PIN_INPUT);
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	66 e0       	ldi	r22, 0x06	; 6
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setPinDirection>
   GIE_enable();
    19a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <GIE_enable>

   // Defining necessary variables
   u8 local_u8CursorPosFreq = 0, local_u8ScreenPosFreq = 0;
    19a8:	19 82       	std	Y+1, r1	; 0x01
    19aa:	1a 82       	std	Y+2, r1	; 0x02
   u8 local_u8Prescaler = 0;
    19ac:	1b 82       	std	Y+3, r1	; 0x03
   extern volatile u8 edge;
   extern volatile u16 period, high_time;

   // This loop runs until the user selects a Prescaler
   while (local_u8Prescaler == 0) {
    19ae:	2e c0       	rjmp	.+92     	; 0x1a0c <SPSV2_freqCounterIcp+0x8e>
      // Reading the home switch state
      u8 local_u8HomeSwitch = SWITCH_getState(HOME_SWITCH_PORT, HOME_SWITCH_PIN,
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
    19ba:	18 2f       	mov	r17, r24
                                              SWITCH_INPUT_PULLDOWN);
      // Reading potentiometer ADC position for movement of cursor and selection
      // on Menu
      u16 local_u16AdcValue = ADC_getValue(ADC_CHANNEL1);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>

      // Updating Cursor position for the user to select the required Prescaler
      SPSV2_updateCursorPrescaler(local_u16AdcValue, &local_u8CursorPosFreq,
    19c2:	ae 01       	movw	r20, r28
    19c4:	4e 5f       	subi	r20, 0xFE	; 254
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	be 01       	movw	r22, r28
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	0e 94 20 0a 	call	0x1440	; 0x1440 <SPSV2_updateCursorPrescaler>
                                  &local_u8ScreenPosFreq);

      // Printing the Prescaler Menu for the user to choose the Prescaler
      SPSV2_printMenuPrescaler(local_u8CursorPosFreq, local_u8ScreenPosFreq);
    19d2:	6a 81       	ldd	r22, Y+2	; 0x02
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPSV2_printMenuPrescaler>
      LCD_createAndDisplayChar(1, arrowCursor2, 1, local_u8CursorPosFreq);
    19da:	29 81       	ldd	r18, Y+1	; 0x01
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	68 e6       	ldi	r22, 0x68	; 104
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 9c 07 	call	0xf38	; 0xf38 <LCD_createAndDisplayChar>
    19e8:	2f ef       	ldi	r18, 0xFF	; 255
    19ea:	82 e5       	ldi	r24, 0x52	; 82
    19ec:	97 e0       	ldi	r25, 0x07	; 7
    19ee:	21 50       	subi	r18, 0x01	; 1
    19f0:	80 40       	sbci	r24, 0x00	; 0
    19f2:	90 40       	sbci	r25, 0x00	; 0
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <SPSV2_freqCounterIcp+0x70>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <SPSV2_freqCounterIcp+0x7a>
    19f8:	00 00       	nop
      _delay_ms(150);

      // Selecting the Prescaler
      SPSV2_choosePrescaler(local_u8CursorPosFreq, local_u8ScreenPosFreq,
    19fa:	ae 01       	movw	r20, r28
    19fc:	4d 5f       	subi	r20, 0xFD	; 253
    19fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1a00:	6a 81       	ldd	r22, Y+2	; 0x02
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <SPSV2_choosePrescaler>
                            &local_u8Prescaler);

      if (local_u8HomeSwitch) {
    1a08:	11 11       	cpse	r17, r1
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <SPSV2_freqCounterIcp+0x94>
   u8 local_u8Prescaler = 0;
   extern volatile u8 edge;
   extern volatile u16 period, high_time;

   // This loop runs until the user selects a Prescaler
   while (local_u8Prescaler == 0) {
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 23       	and	r24, r24
    1a10:	79 f2       	breq	.-98     	; 0x19b0 <SPSV2_freqCounterIcp+0x32>
         break;
      }
   }

   // Initialize Timer 1 in Input Capture Mode with the selected Prescaler
   TMR1_initModeICP(local_u8Prescaler);
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	0e 94 83 03 	call	0x706	; 0x706 <TMR1_initModeICP>
   
   // This loop will keep reading the input signal and printing the frequency and duty cycle Until the user presses the home button
   while (1) {
      // Reading the home switch state
      u8 local_u8HomeSwitch = SWITCH_getState(HOME_SWITCH_PORT, HOME_SWITCH_PIN,
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	67 e0       	ldi	r22, 0x07	; 7
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
    1a22:	18 2f       	mov	r17, r24
                                              SWITCH_INPUT_PULLDOWN);

      // Calculate frequency and duty cycle
      if (period != 0) {
    1a24:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <period>
    1a28:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <period+0x1>
    1a2c:	89 2b       	or	r24, r25
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <SPSV2_freqCounterIcp+0xb4>
    1a30:	4c c0       	rjmp	.+152    	; 0x1aca <SPSV2_freqCounterIcp+0x14c>
		 LCD_clear();
    1a32:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
         u32 frequency = F_CPU / (period * local_u8Prescaler);
    1a36:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <period>
    1a3a:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <period+0x1>
    1a3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1a40:	48 9f       	mul	r20, r24
    1a42:	90 01       	movw	r18, r0
    1a44:	49 9f       	mul	r20, r25
    1a46:	30 0d       	add	r19, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	74 e2       	ldi	r23, 0x24	; 36
    1a52:	84 ef       	ldi	r24, 0xF4	; 244
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    1a5a:	69 01       	movw	r12, r18
    1a5c:	7a 01       	movw	r14, r20
         u8 duty_cycle = (high_time * 100) / period;
    1a5e:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <high_time>
    1a62:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <high_time+0x1>
    1a66:	44 e6       	ldi	r20, 0x64	; 100
    1a68:	42 9f       	mul	r20, r18
    1a6a:	c0 01       	movw	r24, r0
    1a6c:	43 9f       	mul	r20, r19
    1a6e:	90 0d       	add	r25, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <period>
    1a76:	70 91 2c 02 	lds	r23, 0x022C	; 0x80022c <period+0x1>
    1a7a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodhi4>
    1a7e:	06 2f       	mov	r16, r22
         LCD_displayString((u8 *)"Freq: ");
    1a80:	82 ee       	ldi	r24, 0xE2	; 226
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_displayNumber(frequency, 4);
    1a88:	c7 01       	movw	r24, r14
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    1a90:	44 e0       	ldi	r20, 0x04	; 4
    1a92:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
         LCD_moveCursor(1, 0);
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
         LCD_displayString((u8 *)"Duty: ");
    1a9e:	89 ee       	ldi	r24, 0xE9	; 233
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
         LCD_displayNumber(duty_cycle, 4);
    1aa6:	60 2f       	mov	r22, r16
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    1ab2:	44 e0       	ldi	r20, 0x04	; 4
    1ab4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
    1ab8:	2f ef       	ldi	r18, 0xFF	; 255
    1aba:	82 e5       	ldi	r24, 0x52	; 82
    1abc:	97 e0       	ldi	r25, 0x07	; 7
    1abe:	21 50       	subi	r18, 0x01	; 1
    1ac0:	80 40       	sbci	r24, 0x00	; 0
    1ac2:	90 40       	sbci	r25, 0x00	; 0
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <SPSV2_freqCounterIcp+0x140>
    1ac6:	00 c0       	rjmp	.+0      	; 0x1ac8 <SPSV2_freqCounterIcp+0x14a>
    1ac8:	00 00       	nop
		 _delay_ms(150);
      }

      if (local_u8HomeSwitch) {
    1aca:	11 23       	and	r17, r17
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <SPSV2_freqCounterIcp+0x152>
    1ace:	a4 cf       	rjmp	.-184    	; 0x1a18 <SPSV2_freqCounterIcp+0x9a>
         break;
      }
   }

   // Clearing the LCD screen and stopping the Timer 1 peripheral
   GIE_disable();
    1ad0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <GIE_disable>
   LCD_clear();
    1ad4:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
   TMR1_stop();
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TMR1_stop>
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	08 95       	ret

00001af4 <SPSV2_controlFanSpeed>:

void SPSV2_controlFanSpeed(void) {
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
	// Clearing LCD, turning on Global interrupts.
	LCD_clear();
    1af8:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
	GIE_enable();
    1afc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <GIE_enable>
	TMR2_init(TMR2_FASTPWM_MODE, TMR2_PRELOAD_CLR, TMR2_PWM_NON_INVERT);
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	0e 94 a8 04 	call	0x950	; 0x950 <TMR2_init>
	
   while (1) {
	   // Reading the home switch state and Potentiometer for fan speed
	   u8 local_u8HomeSwitch = SWITCH_getState(HOME_SWITCH_PORT, HOME_SWITCH_PIN,
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	67 e0       	ldi	r22, 0x07	; 7
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
    1b14:	d8 2f       	mov	r29, r24
	   SWITCH_INPUT_PULLDOWN);
	   u16 local_u16AdcValue = ADC_getValue(ADC_CHANNEL1);
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_getValue>
	   
      // Map the ADC value to PWM duty cycle using a piecewise function
      u8 pwmDutyCycle = SPSV2_mapAdcToPwm(local_u16AdcValue);
    1b1c:	0e 94 b7 0a 	call	0x156e	; 0x156e <SPSV2_mapAdcToPwm>
    1b20:	c8 2f       	mov	r28, r24

      // Generating a variable PWM signal based off the values of the main
      // potentiometer
      TMR2_generatePWM(pwmDutyCycle, TMR2_PWM_NON_INVERT, TMR2_PRESCALER_64);
    1b22:	43 e0       	ldi	r20, 0x03	; 3
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	0e 94 4d 05 	call	0xa9a	; 0xa9a <TMR2_generatePWM>

	   // Printing The speed on the LCD screen
	   LCD_displayString((u8 *)"Fan Speed: ");
    1b2a:	80 ef       	ldi	r24, 0xF0	; 240
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
	   LCD_moveCursor(1, 0);
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
	   LCD_displayNumber(pwmDutyCycle, 0);
    1b3a:	6c 2f       	mov	r22, r28
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatunsisf>
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
	   LCD_displayChar('%');
    1b4c:	85 e2       	ldi	r24, 0x25	; 37
    1b4e:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	84 e3       	ldi	r24, 0x34	; 52
    1b56:	9c e0       	ldi	r25, 0x0C	; 12
    1b58:	21 50       	subi	r18, 0x01	; 1
    1b5a:	80 40       	sbci	r24, 0x00	; 0
    1b5c:	90 40       	sbci	r25, 0x00	; 0
    1b5e:	e1 f7       	brne	.-8      	; 0x1b58 <SPSV2_controlFanSpeed+0x64>
    1b60:	00 c0       	rjmp	.+0      	; 0x1b62 <SPSV2_controlFanSpeed+0x6e>
    1b62:	00 00       	nop
	   _delay_ms(250);
	   LCD_clear();
    1b64:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
	   
	   if (local_u8HomeSwitch) {
    1b68:	dd 23       	and	r29, r29
    1b6a:	79 f2       	breq	.-98     	; 0x1b0a <SPSV2_controlFanSpeed+0x16>
		   break;
	   }
   }
}
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <SPSV2_turnOffFan>:

void SPSV2_turnOffFan() {
	// Turning off Timer 2 peripheral
	TMR2_stop();
    1b72:	0e 94 72 05 	call	0xae4	; 0xae4 <TMR2_stop>
	GIE_disable();
    1b76:	0e 94 e7 01 	call	0x3ce	; 0x3ce <GIE_disable>
	LCD_clear();
    1b7a:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_clear>
	
	// Displaying info on the screen
	LCD_displayString((u8*)"Turning Off...");
    1b7e:	8c ef       	ldi	r24, 0xFC	; 252
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_moveCursor>
	LCD_displayString((u8*)"Fan");
    1b8e:	8b e1       	ldi	r24, 0x1B	; 27
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
	LCD_displayChar('.');
    1b96:	8e e2       	ldi	r24, 0x2E	; 46
    1b98:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1b9c:	2f ef       	ldi	r18, 0xFF	; 255
    1b9e:	81 ee       	ldi	r24, 0xE1	; 225
    1ba0:	94 e0       	ldi	r25, 0x04	; 4
    1ba2:	21 50       	subi	r18, 0x01	; 1
    1ba4:	80 40       	sbci	r24, 0x00	; 0
    1ba6:	90 40       	sbci	r25, 0x00	; 0
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <SPSV2_turnOffFan+0x30>
    1baa:	00 c0       	rjmp	.+0      	; 0x1bac <SPSV2_turnOffFan+0x3a>
    1bac:	00 00       	nop
	_delay_ms(100);
	LCD_displayChar('.');
    1bae:	8e e2       	ldi	r24, 0x2E	; 46
    1bb0:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1bb4:	2f ef       	ldi	r18, 0xFF	; 255
    1bb6:	81 ee       	ldi	r24, 0xE1	; 225
    1bb8:	94 e0       	ldi	r25, 0x04	; 4
    1bba:	21 50       	subi	r18, 0x01	; 1
    1bbc:	80 40       	sbci	r24, 0x00	; 0
    1bbe:	90 40       	sbci	r25, 0x00	; 0
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <SPSV2_turnOffFan+0x48>
    1bc2:	00 c0       	rjmp	.+0      	; 0x1bc4 <SPSV2_turnOffFan+0x52>
    1bc4:	00 00       	nop
	_delay_ms(100);
	LCD_displayChar('.');
    1bc6:	8e e2       	ldi	r24, 0x2E	; 46
    1bc8:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
	LCD_displayChar('!');
    1bcc:	81 e2       	ldi	r24, 0x21	; 33
    1bce:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_displayChar>
    1bd2:	2f ef       	ldi	r18, 0xFF	; 255
    1bd4:	83 ec       	ldi	r24, 0xC3	; 195
    1bd6:	99 e0       	ldi	r25, 0x09	; 9
    1bd8:	21 50       	subi	r18, 0x01	; 1
    1bda:	80 40       	sbci	r24, 0x00	; 0
    1bdc:	90 40       	sbci	r25, 0x00	; 0
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <SPSV2_turnOffFan+0x66>
    1be0:	00 c0       	rjmp	.+0      	; 0x1be2 <SPSV2_turnOffFan+0x70>
    1be2:	00 00       	nop
    1be4:	08 95       	ret

00001be6 <SPSV2_chooseFun>:
            break;
      }
   }
}

void SPSV2_chooseFun(u8 copy_u8CursorPos, u8 copy_u8ScreenPos) {
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	d8 2f       	mov	r29, r24
    1bec:	c6 2f       	mov	r28, r22
   u8 local_u8EnterSwitch = SWITCH_getState(ENTER_SWITCH_PORT, ENTER_SWITCH_PIN,
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	66 e0       	ldi	r22, 0x06	; 6
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	0e 94 18 08 	call	0x1030	; 0x1030 <SWITCH_getState>
                                            SWITCH_INPUT_PULLDOWN);

   if (local_u8EnterSwitch) {
    1bf8:	88 23       	and	r24, r24
    1bfa:	91 f1       	breq	.+100    	; 0x1c60 <SPSV2_chooseFun+0x7a>
      switch (copy_u8ScreenPos) {
    1bfc:	c1 30       	cpi	r28, 0x01	; 1
    1bfe:	79 f0       	breq	.+30     	; 0x1c1e <SPSV2_chooseFun+0x38>
    1c00:	18 f0       	brcs	.+6      	; 0x1c08 <SPSV2_chooseFun+0x22>
    1c02:	c2 30       	cpi	r28, 0x02	; 2
    1c04:	b9 f0       	breq	.+46     	; 0x1c34 <SPSV2_chooseFun+0x4e>
    1c06:	21 c0       	rjmp	.+66     	; 0x1c4a <SPSV2_chooseFun+0x64>
         case SCREEN_1:
            switch (copy_u8CursorPos) {
    1c08:	dd 23       	and	r29, r29
    1c0a:	19 f0       	breq	.+6      	; 0x1c12 <SPSV2_chooseFun+0x2c>
    1c0c:	d1 30       	cpi	r29, 0x01	; 1
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <SPSV2_chooseFun+0x32>
    1c10:	27 c0       	rjmp	.+78     	; 0x1c60 <SPSV2_chooseFun+0x7a>
               case 0:
                  SPSV2_highPowerOut();
    1c12:	0e 94 2e 0b 	call	0x165c	; 0x165c <SPSV2_highPowerOut>
                  break;
    1c16:	24 c0       	rjmp	.+72     	; 0x1c60 <SPSV2_chooseFun+0x7a>
               case 1:
                  SPSV2_lowPowerOut();
    1c18:	0e 94 aa 0b 	call	0x1754	; 0x1754 <SPSV2_lowPowerOut>
                  break;
    1c1c:	21 c0       	rjmp	.+66     	; 0x1c60 <SPSV2_chooseFun+0x7a>
            }

            break;
         case SCREEN_2:
            switch (copy_u8CursorPos) {
    1c1e:	dd 23       	and	r29, r29
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <SPSV2_chooseFun+0x42>
    1c22:	d1 30       	cpi	r29, 0x01	; 1
    1c24:	21 f0       	breq	.+8      	; 0x1c2e <SPSV2_chooseFun+0x48>
    1c26:	1c c0       	rjmp	.+56     	; 0x1c60 <SPSV2_chooseFun+0x7a>
               case 0:
                  SPSV2_chargingMode();
    1c28:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPSV2_chargingMode>
                  break;
    1c2c:	19 c0       	rjmp	.+50     	; 0x1c60 <SPSV2_chooseFun+0x7a>
               case 1:
                  SPSV2_freqCounterIcp();
    1c2e:	0e 94 bf 0c 	call	0x197e	; 0x197e <SPSV2_freqCounterIcp>
                  break;
    1c32:	16 c0       	rjmp	.+44     	; 0x1c60 <SPSV2_chooseFun+0x7a>
            }

            break;
         case SCREEN_3:
            switch (copy_u8CursorPos) {
    1c34:	dd 23       	and	r29, r29
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <SPSV2_chooseFun+0x58>
    1c38:	d1 30       	cpi	r29, 0x01	; 1
    1c3a:	21 f0       	breq	.+8      	; 0x1c44 <SPSV2_chooseFun+0x5e>
    1c3c:	11 c0       	rjmp	.+34     	; 0x1c60 <SPSV2_chooseFun+0x7a>
               case 0:
			      SPSV2_controlFanSpeed();
    1c3e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <SPSV2_controlFanSpeed>
                  break;
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <SPSV2_chooseFun+0x7a>
               case 1:
			      SPSV2_turnOffFan();
    1c44:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SPSV2_turnOffFan>
                  break;
    1c48:	0b c0       	rjmp	.+22     	; 0x1c60 <SPSV2_chooseFun+0x7a>
            }

            break;
         default:  // Displaying error code 0, relating to the menu function not
                   // working correctly.
            LCD_displayString((u8 *)"Error Code:");
    1c4a:	8f e1       	ldi	r24, 0x1F	; 31
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_displayString>
            LCD_displayNumber(ERR_FUNCTIONS, 0);
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	80 e8       	ldi	r24, 0x80	; 128
    1c5a:	9f e3       	ldi	r25, 0x3F	; 63
    1c5c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_displayNumber>
            break;
      }
   }
}
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <__subsf3>:
    1c66:	50 58       	subi	r21, 0x80	; 128

00001c68 <__addsf3>:
    1c68:	bb 27       	eor	r27, r27
    1c6a:	aa 27       	eor	r26, r26
    1c6c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__addsf3x>
    1c70:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_round>
    1c74:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_pscA>
    1c78:	38 f0       	brcs	.+14     	; 0x1c88 <__addsf3+0x20>
    1c7a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__fp_pscB>
    1c7e:	20 f0       	brcs	.+8      	; 0x1c88 <__addsf3+0x20>
    1c80:	39 f4       	brne	.+14     	; 0x1c90 <__addsf3+0x28>
    1c82:	9f 3f       	cpi	r25, 0xFF	; 255
    1c84:	19 f4       	brne	.+6      	; 0x1c8c <__addsf3+0x24>
    1c86:	26 f4       	brtc	.+8      	; 0x1c90 <__addsf3+0x28>
    1c88:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>
    1c8c:	0e f4       	brtc	.+2      	; 0x1c90 <__addsf3+0x28>
    1c8e:	e0 95       	com	r30
    1c90:	e7 fb       	bst	r30, 7
    1c92:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>

00001c96 <__addsf3x>:
    1c96:	e9 2f       	mov	r30, r25
    1c98:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__fp_split3>
    1c9c:	58 f3       	brcs	.-42     	; 0x1c74 <__addsf3+0xc>
    1c9e:	ba 17       	cp	r27, r26
    1ca0:	62 07       	cpc	r22, r18
    1ca2:	73 07       	cpc	r23, r19
    1ca4:	84 07       	cpc	r24, r20
    1ca6:	95 07       	cpc	r25, r21
    1ca8:	20 f0       	brcs	.+8      	; 0x1cb2 <__addsf3x+0x1c>
    1caa:	79 f4       	brne	.+30     	; 0x1cca <__addsf3x+0x34>
    1cac:	a6 f5       	brtc	.+104    	; 0x1d16 <__addsf3x+0x80>
    1cae:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_zero>
    1cb2:	0e f4       	brtc	.+2      	; 0x1cb6 <__addsf3x+0x20>
    1cb4:	e0 95       	com	r30
    1cb6:	0b 2e       	mov	r0, r27
    1cb8:	ba 2f       	mov	r27, r26
    1cba:	a0 2d       	mov	r26, r0
    1cbc:	0b 01       	movw	r0, r22
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	90 01       	movw	r18, r0
    1cc2:	0c 01       	movw	r0, r24
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	a0 01       	movw	r20, r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	ff 27       	eor	r31, r31
    1ccc:	59 1b       	sub	r21, r25
    1cce:	99 f0       	breq	.+38     	; 0x1cf6 <__addsf3x+0x60>
    1cd0:	59 3f       	cpi	r21, 0xF9	; 249
    1cd2:	50 f4       	brcc	.+20     	; 0x1ce8 <__addsf3x+0x52>
    1cd4:	50 3e       	cpi	r21, 0xE0	; 224
    1cd6:	68 f1       	brcs	.+90     	; 0x1d32 <__addsf3x+0x9c>
    1cd8:	1a 16       	cp	r1, r26
    1cda:	f0 40       	sbci	r31, 0x00	; 0
    1cdc:	a2 2f       	mov	r26, r18
    1cde:	23 2f       	mov	r18, r19
    1ce0:	34 2f       	mov	r19, r20
    1ce2:	44 27       	eor	r20, r20
    1ce4:	58 5f       	subi	r21, 0xF8	; 248
    1ce6:	f3 cf       	rjmp	.-26     	; 0x1cce <__addsf3x+0x38>
    1ce8:	46 95       	lsr	r20
    1cea:	37 95       	ror	r19
    1cec:	27 95       	ror	r18
    1cee:	a7 95       	ror	r26
    1cf0:	f0 40       	sbci	r31, 0x00	; 0
    1cf2:	53 95       	inc	r21
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__addsf3x+0x52>
    1cf6:	7e f4       	brtc	.+30     	; 0x1d16 <__addsf3x+0x80>
    1cf8:	1f 16       	cp	r1, r31
    1cfa:	ba 0b       	sbc	r27, r26
    1cfc:	62 0b       	sbc	r22, r18
    1cfe:	73 0b       	sbc	r23, r19
    1d00:	84 0b       	sbc	r24, r20
    1d02:	ba f0       	brmi	.+46     	; 0x1d32 <__addsf3x+0x9c>
    1d04:	91 50       	subi	r25, 0x01	; 1
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <__addsf3x+0x9a>
    1d08:	ff 0f       	add	r31, r31
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	66 1f       	adc	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	88 1f       	adc	r24, r24
    1d12:	c2 f7       	brpl	.-16     	; 0x1d04 <__addsf3x+0x6e>
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <__addsf3x+0x9c>
    1d16:	ba 0f       	add	r27, r26
    1d18:	62 1f       	adc	r22, r18
    1d1a:	73 1f       	adc	r23, r19
    1d1c:	84 1f       	adc	r24, r20
    1d1e:	48 f4       	brcc	.+18     	; 0x1d32 <__addsf3x+0x9c>
    1d20:	87 95       	ror	r24
    1d22:	77 95       	ror	r23
    1d24:	67 95       	ror	r22
    1d26:	b7 95       	ror	r27
    1d28:	f7 95       	ror	r31
    1d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <__addsf3x+0x9a>
    1d2e:	b0 cf       	rjmp	.-160    	; 0x1c90 <__addsf3+0x28>
    1d30:	93 95       	inc	r25
    1d32:	88 0f       	add	r24, r24
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <__addsf3x+0xa2>
    1d36:	99 27       	eor	r25, r25
    1d38:	ee 0f       	add	r30, r30
    1d3a:	97 95       	ror	r25
    1d3c:	87 95       	ror	r24
    1d3e:	08 95       	ret

00001d40 <__cmpsf2>:
    1d40:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_cmp>
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <__cmpsf2+0x8>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	08 95       	ret

00001d4a <__divsf3>:
    1d4a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__divsf3x>
    1d4e:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_round>
    1d52:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__fp_pscB>
    1d56:	58 f0       	brcs	.+22     	; 0x1d6e <__divsf3+0x24>
    1d58:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_pscA>
    1d5c:	40 f0       	brcs	.+16     	; 0x1d6e <__divsf3+0x24>
    1d5e:	29 f4       	brne	.+10     	; 0x1d6a <__divsf3+0x20>
    1d60:	5f 3f       	cpi	r21, 0xFF	; 255
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <__divsf3+0x24>
    1d64:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    1d68:	51 11       	cpse	r21, r1
    1d6a:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_szero>
    1d6e:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>

00001d72 <__divsf3x>:
    1d72:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__fp_split3>
    1d76:	68 f3       	brcs	.-38     	; 0x1d52 <__divsf3+0x8>

00001d78 <__divsf3_pse>:
    1d78:	99 23       	and	r25, r25
    1d7a:	b1 f3       	breq	.-20     	; 0x1d68 <__divsf3+0x1e>
    1d7c:	55 23       	and	r21, r21
    1d7e:	91 f3       	breq	.-28     	; 0x1d64 <__divsf3+0x1a>
    1d80:	95 1b       	sub	r25, r21
    1d82:	55 0b       	sbc	r21, r21
    1d84:	bb 27       	eor	r27, r27
    1d86:	aa 27       	eor	r26, r26
    1d88:	62 17       	cp	r22, r18
    1d8a:	73 07       	cpc	r23, r19
    1d8c:	84 07       	cpc	r24, r20
    1d8e:	38 f0       	brcs	.+14     	; 0x1d9e <__divsf3_pse+0x26>
    1d90:	9f 5f       	subi	r25, 0xFF	; 255
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	22 0f       	add	r18, r18
    1d96:	33 1f       	adc	r19, r19
    1d98:	44 1f       	adc	r20, r20
    1d9a:	aa 1f       	adc	r26, r26
    1d9c:	a9 f3       	breq	.-22     	; 0x1d88 <__divsf3_pse+0x10>
    1d9e:	35 d0       	rcall	.+106    	; 0x1e0a <__divsf3_pse+0x92>
    1da0:	0e 2e       	mov	r0, r30
    1da2:	3a f0       	brmi	.+14     	; 0x1db2 <__divsf3_pse+0x3a>
    1da4:	e0 e8       	ldi	r30, 0x80	; 128
    1da6:	32 d0       	rcall	.+100    	; 0x1e0c <__divsf3_pse+0x94>
    1da8:	91 50       	subi	r25, 0x01	; 1
    1daa:	50 40       	sbci	r21, 0x00	; 0
    1dac:	e6 95       	lsr	r30
    1dae:	00 1c       	adc	r0, r0
    1db0:	ca f7       	brpl	.-14     	; 0x1da4 <__divsf3_pse+0x2c>
    1db2:	2b d0       	rcall	.+86     	; 0x1e0a <__divsf3_pse+0x92>
    1db4:	fe 2f       	mov	r31, r30
    1db6:	29 d0       	rcall	.+82     	; 0x1e0a <__divsf3_pse+0x92>
    1db8:	66 0f       	add	r22, r22
    1dba:	77 1f       	adc	r23, r23
    1dbc:	88 1f       	adc	r24, r24
    1dbe:	bb 1f       	adc	r27, r27
    1dc0:	26 17       	cp	r18, r22
    1dc2:	37 07       	cpc	r19, r23
    1dc4:	48 07       	cpc	r20, r24
    1dc6:	ab 07       	cpc	r26, r27
    1dc8:	b0 e8       	ldi	r27, 0x80	; 128
    1dca:	09 f0       	breq	.+2      	; 0x1dce <__divsf3_pse+0x56>
    1dcc:	bb 0b       	sbc	r27, r27
    1dce:	80 2d       	mov	r24, r0
    1dd0:	bf 01       	movw	r22, r30
    1dd2:	ff 27       	eor	r31, r31
    1dd4:	93 58       	subi	r25, 0x83	; 131
    1dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd8:	3a f0       	brmi	.+14     	; 0x1de8 <__divsf3_pse+0x70>
    1dda:	9e 3f       	cpi	r25, 0xFE	; 254
    1ddc:	51 05       	cpc	r21, r1
    1dde:	78 f0       	brcs	.+30     	; 0x1dfe <__divsf3_pse+0x86>
    1de0:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    1de4:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_szero>
    1de8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dea:	e4 f3       	brlt	.-8      	; 0x1de4 <__divsf3_pse+0x6c>
    1dec:	98 3e       	cpi	r25, 0xE8	; 232
    1dee:	d4 f3       	brlt	.-12     	; 0x1de4 <__divsf3_pse+0x6c>
    1df0:	86 95       	lsr	r24
    1df2:	77 95       	ror	r23
    1df4:	67 95       	ror	r22
    1df6:	b7 95       	ror	r27
    1df8:	f7 95       	ror	r31
    1dfa:	9f 5f       	subi	r25, 0xFF	; 255
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__divsf3_pse+0x78>
    1dfe:	88 0f       	add	r24, r24
    1e00:	91 1d       	adc	r25, r1
    1e02:	96 95       	lsr	r25
    1e04:	87 95       	ror	r24
    1e06:	97 f9       	bld	r25, 7
    1e08:	08 95       	ret
    1e0a:	e1 e0       	ldi	r30, 0x01	; 1
    1e0c:	66 0f       	add	r22, r22
    1e0e:	77 1f       	adc	r23, r23
    1e10:	88 1f       	adc	r24, r24
    1e12:	bb 1f       	adc	r27, r27
    1e14:	62 17       	cp	r22, r18
    1e16:	73 07       	cpc	r23, r19
    1e18:	84 07       	cpc	r24, r20
    1e1a:	ba 07       	cpc	r27, r26
    1e1c:	20 f0       	brcs	.+8      	; 0x1e26 <__divsf3_pse+0xae>
    1e1e:	62 1b       	sub	r22, r18
    1e20:	73 0b       	sbc	r23, r19
    1e22:	84 0b       	sbc	r24, r20
    1e24:	ba 0b       	sbc	r27, r26
    1e26:	ee 1f       	adc	r30, r30
    1e28:	88 f7       	brcc	.-30     	; 0x1e0c <__divsf3_pse+0x94>
    1e2a:	e0 95       	com	r30
    1e2c:	08 95       	ret

00001e2e <__fixunssfsi>:
    1e2e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__fp_splitA>
    1e32:	88 f0       	brcs	.+34     	; 0x1e56 <__fixunssfsi+0x28>
    1e34:	9f 57       	subi	r25, 0x7F	; 127
    1e36:	98 f0       	brcs	.+38     	; 0x1e5e <__fixunssfsi+0x30>
    1e38:	b9 2f       	mov	r27, r25
    1e3a:	99 27       	eor	r25, r25
    1e3c:	b7 51       	subi	r27, 0x17	; 23
    1e3e:	b0 f0       	brcs	.+44     	; 0x1e6c <__fixunssfsi+0x3e>
    1e40:	e1 f0       	breq	.+56     	; 0x1e7a <__fixunssfsi+0x4c>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	1a f0       	brmi	.+6      	; 0x1e52 <__fixunssfsi+0x24>
    1e4c:	ba 95       	dec	r27
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__fixunssfsi+0x14>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <__fixunssfsi+0x4c>
    1e52:	b1 30       	cpi	r27, 0x01	; 1
    1e54:	91 f0       	breq	.+36     	; 0x1e7a <__fixunssfsi+0x4c>
    1e56:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_zero>
    1e5a:	b1 e0       	ldi	r27, 0x01	; 1
    1e5c:	08 95       	ret
    1e5e:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_zero>
    1e62:	67 2f       	mov	r22, r23
    1e64:	78 2f       	mov	r23, r24
    1e66:	88 27       	eor	r24, r24
    1e68:	b8 5f       	subi	r27, 0xF8	; 248
    1e6a:	39 f0       	breq	.+14     	; 0x1e7a <__fixunssfsi+0x4c>
    1e6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e6e:	cc f3       	brlt	.-14     	; 0x1e62 <__fixunssfsi+0x34>
    1e70:	86 95       	lsr	r24
    1e72:	77 95       	ror	r23
    1e74:	67 95       	ror	r22
    1e76:	b3 95       	inc	r27
    1e78:	d9 f7       	brne	.-10     	; 0x1e70 <__fixunssfsi+0x42>
    1e7a:	3e f4       	brtc	.+14     	; 0x1e8a <__fixunssfsi+0x5c>
    1e7c:	90 95       	com	r25
    1e7e:	80 95       	com	r24
    1e80:	70 95       	com	r23
    1e82:	61 95       	neg	r22
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	08 95       	ret

00001e8c <__floatunsisf>:
    1e8c:	e8 94       	clt
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <__floatsisf+0x12>

00001e90 <__floatsisf>:
    1e90:	97 fb       	bst	r25, 7
    1e92:	3e f4       	brtc	.+14     	; 0x1ea2 <__floatsisf+0x12>
    1e94:	90 95       	com	r25
    1e96:	80 95       	com	r24
    1e98:	70 95       	com	r23
    1e9a:	61 95       	neg	r22
    1e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea2:	99 23       	and	r25, r25
    1ea4:	a9 f0       	breq	.+42     	; 0x1ed0 <__floatsisf+0x40>
    1ea6:	f9 2f       	mov	r31, r25
    1ea8:	96 e9       	ldi	r25, 0x96	; 150
    1eaa:	bb 27       	eor	r27, r27
    1eac:	93 95       	inc	r25
    1eae:	f6 95       	lsr	r31
    1eb0:	87 95       	ror	r24
    1eb2:	77 95       	ror	r23
    1eb4:	67 95       	ror	r22
    1eb6:	b7 95       	ror	r27
    1eb8:	f1 11       	cpse	r31, r1
    1eba:	f8 cf       	rjmp	.-16     	; 0x1eac <__floatsisf+0x1c>
    1ebc:	fa f4       	brpl	.+62     	; 0x1efc <__floatsisf+0x6c>
    1ebe:	bb 0f       	add	r27, r27
    1ec0:	11 f4       	brne	.+4      	; 0x1ec6 <__floatsisf+0x36>
    1ec2:	60 ff       	sbrs	r22, 0
    1ec4:	1b c0       	rjmp	.+54     	; 0x1efc <__floatsisf+0x6c>
    1ec6:	6f 5f       	subi	r22, 0xFF	; 255
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ece:	16 c0       	rjmp	.+44     	; 0x1efc <__floatsisf+0x6c>
    1ed0:	88 23       	and	r24, r24
    1ed2:	11 f0       	breq	.+4      	; 0x1ed8 <__floatsisf+0x48>
    1ed4:	96 e9       	ldi	r25, 0x96	; 150
    1ed6:	11 c0       	rjmp	.+34     	; 0x1efa <__floatsisf+0x6a>
    1ed8:	77 23       	and	r23, r23
    1eda:	21 f0       	breq	.+8      	; 0x1ee4 <__floatsisf+0x54>
    1edc:	9e e8       	ldi	r25, 0x8E	; 142
    1ede:	87 2f       	mov	r24, r23
    1ee0:	76 2f       	mov	r23, r22
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <__floatsisf+0x5e>
    1ee4:	66 23       	and	r22, r22
    1ee6:	71 f0       	breq	.+28     	; 0x1f04 <__floatsisf+0x74>
    1ee8:	96 e8       	ldi	r25, 0x86	; 134
    1eea:	86 2f       	mov	r24, r22
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	2a f0       	brmi	.+10     	; 0x1efc <__floatsisf+0x6c>
    1ef2:	9a 95       	dec	r25
    1ef4:	66 0f       	add	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	da f7       	brpl	.-10     	; 0x1ef2 <__floatsisf+0x62>
    1efc:	88 0f       	add	r24, r24
    1efe:	96 95       	lsr	r25
    1f00:	87 95       	ror	r24
    1f02:	97 f9       	bld	r25, 7
    1f04:	08 95       	ret

00001f06 <__fp_cmp>:
    1f06:	99 0f       	add	r25, r25
    1f08:	00 08       	sbc	r0, r0
    1f0a:	55 0f       	add	r21, r21
    1f0c:	aa 0b       	sbc	r26, r26
    1f0e:	e0 e8       	ldi	r30, 0x80	; 128
    1f10:	fe ef       	ldi	r31, 0xFE	; 254
    1f12:	16 16       	cp	r1, r22
    1f14:	17 06       	cpc	r1, r23
    1f16:	e8 07       	cpc	r30, r24
    1f18:	f9 07       	cpc	r31, r25
    1f1a:	c0 f0       	brcs	.+48     	; 0x1f4c <__fp_cmp+0x46>
    1f1c:	12 16       	cp	r1, r18
    1f1e:	13 06       	cpc	r1, r19
    1f20:	e4 07       	cpc	r30, r20
    1f22:	f5 07       	cpc	r31, r21
    1f24:	98 f0       	brcs	.+38     	; 0x1f4c <__fp_cmp+0x46>
    1f26:	62 1b       	sub	r22, r18
    1f28:	73 0b       	sbc	r23, r19
    1f2a:	84 0b       	sbc	r24, r20
    1f2c:	95 0b       	sbc	r25, r21
    1f2e:	39 f4       	brne	.+14     	; 0x1f3e <__fp_cmp+0x38>
    1f30:	0a 26       	eor	r0, r26
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <__fp_cmp+0x46>
    1f34:	23 2b       	or	r18, r19
    1f36:	24 2b       	or	r18, r20
    1f38:	25 2b       	or	r18, r21
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <__fp_cmp+0x3e>
    1f3c:	08 95       	ret
    1f3e:	0a 26       	eor	r0, r26
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <__fp_cmp+0x3e>
    1f42:	a1 40       	sbci	r26, 0x01	; 1
    1f44:	a6 95       	lsr	r26
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	81 1d       	adc	r24, r1
    1f4a:	81 1d       	adc	r24, r1
    1f4c:	08 95       	ret

00001f4e <__fp_inf>:
    1f4e:	97 f9       	bld	r25, 7
    1f50:	9f 67       	ori	r25, 0x7F	; 127
    1f52:	80 e8       	ldi	r24, 0x80	; 128
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	08 95       	ret

00001f5a <__fp_nan>:
    1f5a:	9f ef       	ldi	r25, 0xFF	; 255
    1f5c:	80 ec       	ldi	r24, 0xC0	; 192
    1f5e:	08 95       	ret

00001f60 <__fp_pscA>:
    1f60:	00 24       	eor	r0, r0
    1f62:	0a 94       	dec	r0
    1f64:	16 16       	cp	r1, r22
    1f66:	17 06       	cpc	r1, r23
    1f68:	18 06       	cpc	r1, r24
    1f6a:	09 06       	cpc	r0, r25
    1f6c:	08 95       	ret

00001f6e <__fp_pscB>:
    1f6e:	00 24       	eor	r0, r0
    1f70:	0a 94       	dec	r0
    1f72:	12 16       	cp	r1, r18
    1f74:	13 06       	cpc	r1, r19
    1f76:	14 06       	cpc	r1, r20
    1f78:	05 06       	cpc	r0, r21
    1f7a:	08 95       	ret

00001f7c <__fp_round>:
    1f7c:	09 2e       	mov	r0, r25
    1f7e:	03 94       	inc	r0
    1f80:	00 0c       	add	r0, r0
    1f82:	11 f4       	brne	.+4      	; 0x1f88 <__fp_round+0xc>
    1f84:	88 23       	and	r24, r24
    1f86:	52 f0       	brmi	.+20     	; 0x1f9c <__fp_round+0x20>
    1f88:	bb 0f       	add	r27, r27
    1f8a:	40 f4       	brcc	.+16     	; 0x1f9c <__fp_round+0x20>
    1f8c:	bf 2b       	or	r27, r31
    1f8e:	11 f4       	brne	.+4      	; 0x1f94 <__fp_round+0x18>
    1f90:	60 ff       	sbrs	r22, 0
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <__fp_round+0x20>
    1f94:	6f 5f       	subi	r22, 0xFF	; 255
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9c:	08 95       	ret

00001f9e <__fp_split3>:
    1f9e:	57 fd       	sbrc	r21, 7
    1fa0:	90 58       	subi	r25, 0x80	; 128
    1fa2:	44 0f       	add	r20, r20
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	59 f0       	breq	.+22     	; 0x1fbe <__fp_splitA+0x10>
    1fa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1faa:	71 f0       	breq	.+28     	; 0x1fc8 <__fp_splitA+0x1a>
    1fac:	47 95       	ror	r20

00001fae <__fp_splitA>:
    1fae:	88 0f       	add	r24, r24
    1fb0:	97 fb       	bst	r25, 7
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <__fp_splitA+0x20>
    1fb6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb8:	79 f0       	breq	.+30     	; 0x1fd8 <__fp_splitA+0x2a>
    1fba:	87 95       	ror	r24
    1fbc:	08 95       	ret
    1fbe:	12 16       	cp	r1, r18
    1fc0:	13 06       	cpc	r1, r19
    1fc2:	14 06       	cpc	r1, r20
    1fc4:	55 1f       	adc	r21, r21
    1fc6:	f2 cf       	rjmp	.-28     	; 0x1fac <__fp_split3+0xe>
    1fc8:	46 95       	lsr	r20
    1fca:	f1 df       	rcall	.-30     	; 0x1fae <__fp_splitA>
    1fcc:	08 c0       	rjmp	.+16     	; 0x1fde <__fp_splitA+0x30>
    1fce:	16 16       	cp	r1, r22
    1fd0:	17 06       	cpc	r1, r23
    1fd2:	18 06       	cpc	r1, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	f1 cf       	rjmp	.-30     	; 0x1fba <__fp_splitA+0xc>
    1fd8:	86 95       	lsr	r24
    1fda:	71 05       	cpc	r23, r1
    1fdc:	61 05       	cpc	r22, r1
    1fde:	08 94       	sec
    1fe0:	08 95       	ret

00001fe2 <__fp_zero>:
    1fe2:	e8 94       	clt

00001fe4 <__fp_szero>:
    1fe4:	bb 27       	eor	r27, r27
    1fe6:	66 27       	eor	r22, r22
    1fe8:	77 27       	eor	r23, r23
    1fea:	cb 01       	movw	r24, r22
    1fec:	97 f9       	bld	r25, 7
    1fee:	08 95       	ret

00001ff0 <__gesf2>:
    1ff0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_cmp>
    1ff4:	08 f4       	brcc	.+2      	; 0x1ff8 <__gesf2+0x8>
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	08 95       	ret

00001ffa <__mulsf3>:
    1ffa:	0e 94 10 10 	call	0x2020	; 0x2020 <__mulsf3x>
    1ffe:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_round>
    2002:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_pscA>
    2006:	38 f0       	brcs	.+14     	; 0x2016 <__mulsf3+0x1c>
    2008:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__fp_pscB>
    200c:	20 f0       	brcs	.+8      	; 0x2016 <__mulsf3+0x1c>
    200e:	95 23       	and	r25, r21
    2010:	11 f0       	breq	.+4      	; 0x2016 <__mulsf3+0x1c>
    2012:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    2016:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>
    201a:	11 24       	eor	r1, r1
    201c:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_szero>

00002020 <__mulsf3x>:
    2020:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__fp_split3>
    2024:	70 f3       	brcs	.-36     	; 0x2002 <__mulsf3+0x8>

00002026 <__mulsf3_pse>:
    2026:	95 9f       	mul	r25, r21
    2028:	c1 f3       	breq	.-16     	; 0x201a <__mulsf3+0x20>
    202a:	95 0f       	add	r25, r21
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	55 1f       	adc	r21, r21
    2030:	62 9f       	mul	r22, r18
    2032:	f0 01       	movw	r30, r0
    2034:	72 9f       	mul	r23, r18
    2036:	bb 27       	eor	r27, r27
    2038:	f0 0d       	add	r31, r0
    203a:	b1 1d       	adc	r27, r1
    203c:	63 9f       	mul	r22, r19
    203e:	aa 27       	eor	r26, r26
    2040:	f0 0d       	add	r31, r0
    2042:	b1 1d       	adc	r27, r1
    2044:	aa 1f       	adc	r26, r26
    2046:	64 9f       	mul	r22, r20
    2048:	66 27       	eor	r22, r22
    204a:	b0 0d       	add	r27, r0
    204c:	a1 1d       	adc	r26, r1
    204e:	66 1f       	adc	r22, r22
    2050:	82 9f       	mul	r24, r18
    2052:	22 27       	eor	r18, r18
    2054:	b0 0d       	add	r27, r0
    2056:	a1 1d       	adc	r26, r1
    2058:	62 1f       	adc	r22, r18
    205a:	73 9f       	mul	r23, r19
    205c:	b0 0d       	add	r27, r0
    205e:	a1 1d       	adc	r26, r1
    2060:	62 1f       	adc	r22, r18
    2062:	83 9f       	mul	r24, r19
    2064:	a0 0d       	add	r26, r0
    2066:	61 1d       	adc	r22, r1
    2068:	22 1f       	adc	r18, r18
    206a:	74 9f       	mul	r23, r20
    206c:	33 27       	eor	r19, r19
    206e:	a0 0d       	add	r26, r0
    2070:	61 1d       	adc	r22, r1
    2072:	23 1f       	adc	r18, r19
    2074:	84 9f       	mul	r24, r20
    2076:	60 0d       	add	r22, r0
    2078:	21 1d       	adc	r18, r1
    207a:	82 2f       	mov	r24, r18
    207c:	76 2f       	mov	r23, r22
    207e:	6a 2f       	mov	r22, r26
    2080:	11 24       	eor	r1, r1
    2082:	9f 57       	subi	r25, 0x7F	; 127
    2084:	50 40       	sbci	r21, 0x00	; 0
    2086:	9a f0       	brmi	.+38     	; 0x20ae <__mulsf3_pse+0x88>
    2088:	f1 f0       	breq	.+60     	; 0x20c6 <__mulsf3_pse+0xa0>
    208a:	88 23       	and	r24, r24
    208c:	4a f0       	brmi	.+18     	; 0x20a0 <__mulsf3_pse+0x7a>
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	bb 1f       	adc	r27, r27
    2094:	66 1f       	adc	r22, r22
    2096:	77 1f       	adc	r23, r23
    2098:	88 1f       	adc	r24, r24
    209a:	91 50       	subi	r25, 0x01	; 1
    209c:	50 40       	sbci	r21, 0x00	; 0
    209e:	a9 f7       	brne	.-22     	; 0x208a <__mulsf3_pse+0x64>
    20a0:	9e 3f       	cpi	r25, 0xFE	; 254
    20a2:	51 05       	cpc	r21, r1
    20a4:	80 f0       	brcs	.+32     	; 0x20c6 <__mulsf3_pse+0xa0>
    20a6:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    20aa:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_szero>
    20ae:	5f 3f       	cpi	r21, 0xFF	; 255
    20b0:	e4 f3       	brlt	.-8      	; 0x20aa <__mulsf3_pse+0x84>
    20b2:	98 3e       	cpi	r25, 0xE8	; 232
    20b4:	d4 f3       	brlt	.-12     	; 0x20aa <__mulsf3_pse+0x84>
    20b6:	86 95       	lsr	r24
    20b8:	77 95       	ror	r23
    20ba:	67 95       	ror	r22
    20bc:	b7 95       	ror	r27
    20be:	f7 95       	ror	r31
    20c0:	e7 95       	ror	r30
    20c2:	9f 5f       	subi	r25, 0xFF	; 255
    20c4:	c1 f7       	brne	.-16     	; 0x20b6 <__mulsf3_pse+0x90>
    20c6:	fe 2b       	or	r31, r30
    20c8:	88 0f       	add	r24, r24
    20ca:	91 1d       	adc	r25, r1
    20cc:	96 95       	lsr	r25
    20ce:	87 95       	ror	r24
    20d0:	97 f9       	bld	r25, 7
    20d2:	08 95       	ret

000020d4 <__udivmodhi4>:
    20d4:	aa 1b       	sub	r26, r26
    20d6:	bb 1b       	sub	r27, r27
    20d8:	51 e1       	ldi	r21, 0x11	; 17
    20da:	07 c0       	rjmp	.+14     	; 0x20ea <__udivmodhi4_ep>

000020dc <__udivmodhi4_loop>:
    20dc:	aa 1f       	adc	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	a6 17       	cp	r26, r22
    20e2:	b7 07       	cpc	r27, r23
    20e4:	10 f0       	brcs	.+4      	; 0x20ea <__udivmodhi4_ep>
    20e6:	a6 1b       	sub	r26, r22
    20e8:	b7 0b       	sbc	r27, r23

000020ea <__udivmodhi4_ep>:
    20ea:	88 1f       	adc	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	5a 95       	dec	r21
    20f0:	a9 f7       	brne	.-22     	; 0x20dc <__udivmodhi4_loop>
    20f2:	80 95       	com	r24
    20f4:	90 95       	com	r25
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	08 95       	ret

000020fc <__divmodhi4>:
    20fc:	97 fb       	bst	r25, 7
    20fe:	07 2e       	mov	r0, r23
    2100:	16 f4       	brtc	.+4      	; 0x2106 <__divmodhi4+0xa>
    2102:	00 94       	com	r0
    2104:	07 d0       	rcall	.+14     	; 0x2114 <__divmodhi4_neg1>
    2106:	77 fd       	sbrc	r23, 7
    2108:	09 d0       	rcall	.+18     	; 0x211c <__divmodhi4_neg2>
    210a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodhi4>
    210e:	07 fc       	sbrc	r0, 7
    2110:	05 d0       	rcall	.+10     	; 0x211c <__divmodhi4_neg2>
    2112:	3e f4       	brtc	.+14     	; 0x2122 <__divmodhi4_exit>

00002114 <__divmodhi4_neg1>:
    2114:	90 95       	com	r25
    2116:	81 95       	neg	r24
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	08 95       	ret

0000211c <__divmodhi4_neg2>:
    211c:	70 95       	com	r23
    211e:	61 95       	neg	r22
    2120:	7f 4f       	sbci	r23, 0xFF	; 255

00002122 <__divmodhi4_exit>:
    2122:	08 95       	ret

00002124 <__udivmodsi4>:
    2124:	a1 e2       	ldi	r26, 0x21	; 33
    2126:	1a 2e       	mov	r1, r26
    2128:	aa 1b       	sub	r26, r26
    212a:	bb 1b       	sub	r27, r27
    212c:	fd 01       	movw	r30, r26
    212e:	0d c0       	rjmp	.+26     	; 0x214a <__udivmodsi4_ep>

00002130 <__udivmodsi4_loop>:
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	ee 1f       	adc	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	a2 17       	cp	r26, r18
    213a:	b3 07       	cpc	r27, r19
    213c:	e4 07       	cpc	r30, r20
    213e:	f5 07       	cpc	r31, r21
    2140:	20 f0       	brcs	.+8      	; 0x214a <__udivmodsi4_ep>
    2142:	a2 1b       	sub	r26, r18
    2144:	b3 0b       	sbc	r27, r19
    2146:	e4 0b       	sbc	r30, r20
    2148:	f5 0b       	sbc	r31, r21

0000214a <__udivmodsi4_ep>:
    214a:	66 1f       	adc	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	88 1f       	adc	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	1a 94       	dec	r1
    2154:	69 f7       	brne	.-38     	; 0x2130 <__udivmodsi4_loop>
    2156:	60 95       	com	r22
    2158:	70 95       	com	r23
    215a:	80 95       	com	r24
    215c:	90 95       	com	r25
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	bd 01       	movw	r22, r26
    2164:	cf 01       	movw	r24, r30
    2166:	08 95       	ret

00002168 <__tablejump2__>:
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	05 90       	lpm	r0, Z+
    216e:	f4 91       	lpm	r31, Z
    2170:	e0 2d       	mov	r30, r0
    2172:	09 94       	ijmp

00002174 <__umulhisi3>:
    2174:	a2 9f       	mul	r26, r18
    2176:	b0 01       	movw	r22, r0
    2178:	b3 9f       	mul	r27, r19
    217a:	c0 01       	movw	r24, r0
    217c:	a3 9f       	mul	r26, r19
    217e:	70 0d       	add	r23, r0
    2180:	81 1d       	adc	r24, r1
    2182:	11 24       	eor	r1, r1
    2184:	91 1d       	adc	r25, r1
    2186:	b2 9f       	mul	r27, r18
    2188:	70 0d       	add	r23, r0
    218a:	81 1d       	adc	r24, r1
    218c:	11 24       	eor	r1, r1
    218e:	91 1d       	adc	r25, r1
    2190:	08 95       	ret

00002192 <_exit>:
    2192:	f8 94       	cli

00002194 <__stop_program>:
    2194:	ff cf       	rjmp	.-2      	; 0x2194 <__stop_program>
